{"createdAt":"2025-04-30T21:29:47.377Z","updatedAt":"2025-05-26T21:56:26.000Z","id":"yoj6BCWURbtB941i","name":"2. Extract Tasks from Email","active":true,"isArchived":false,"nodes":[{"parameters":{"workflowId":{"__rl":true,"value":"ar1V7OobX3sauykf","mode":"list","cachedResultName":"Get Token"},"workflowInputs":{"mappingMode":"defineBelow","value":{"user_id":"={{ $json.userId }}"},"matchingColumns":["user_id"],"schema":[{"id":"user_id","displayName":"user_id","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[340,-900],"id":"0e2d8fac-7756-41c7-a5d9-ed548c115aa0","name":"Get Token and User","retryOnFail":true},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"3c949b9c-8f9a-4bf8-909f-a6a4db374962","leftValue":"={{ $json.count }}","rightValue":0,"operator":{"type":"number","operation":"gt"}}],"combinator":"and"},"looseTypeValidation":true,"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[780,-900],"id":"114d8738-29a8-4622-a5ec-77bee0e5e65f","name":"Exists?"},{"parameters":{"url":"=https://www.googleapis.com/gmail/v1/users/me/messages/{{ $('Set Params').item.json.emailId }}","sendQuery":true,"queryParameters":{"parameters":[{"name":"format","value":"full"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Bearer {{ $('Get Token and User').item.json.accessToken }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[140,-500],"id":"fb37ee79-accd-49d5-964c-8a4cbb5206b6","name":"Get Full Gmail Email","retryOnFail":true,"maxTries":5,"waitBetweenTries":1500},{"parameters":{"jsCode":"// This code runs in an n8n Code node (JavaScript)\n// It decodes the email body from Gmail API's multipart response\n\nfunction findBody(part, preferredMimeTypes = ['text/plain', 'text/html']) {\n  if (preferredMimeTypes.includes(part.mimeType) && part.body?.data) {\n    return {\n      mimeType: part.mimeType,\n      data: part.body.data,\n    };\n  }\n\n  if (part.parts) {\n    for (const subpart of part.parts) {\n      const result = findBody(subpart, preferredMimeTypes);\n      if (result) return result;\n    }\n  }\n\n  return null;\n}\n\nreturn items.map(item => {\n  const payload = item.json.payload;\n  const bodyData =\n    payload.body?.data || // Single-part email\n    findBody(payload)?.data;\n\n  if (!bodyData) {\n    item.json.decodedBody = 'No email body found.';\n    return item;\n  }\n\n  // Gmail uses base64url encoding\n  const base64 = bodyData.replace(/-/g, '+').replace(/_/g, '/');\n  const buffer = Buffer.from(base64, 'base64');\n  const decoded = buffer.toString('utf8');\n\n  item.json.decodedBody = decoded;\n  return item;\n});"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[360,-500],"id":"dc4890da-69d3-4787-bd35-acf345ef48e4","name":"Decode Email Body"},{"parameters":{"jsCode":"// n8n JavaScript Code node version of looks_like_promotion()\n\nreturn items.map(item => {\n  const headers = item.json.payload?.headers || [];\n\n  // Convert header names to lowercase\n  const headerKeys = new Set(headers.map(h => h.name.toLowerCase()));\n\n  // Check for promotional indicators\n  const isPromotion =\n    headerKeys.has('list-unsubscribe') ||\n    headerKeys.has('precedence') ||\n    headerKeys.has('auto-submitted');\n\n  // Add a new field to the item\n  item.json.isPromotion = isPromotion;\n  return item;\n});"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[580,-500],"id":"47ad8eb2-97f6-46d8-a54d-3f7e7149616f","name":"Check if it is Promotion"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"300885a6-4a10-4fc5-8378-017b88c4bcab","leftValue":"={{ $json.isPromotion }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[800,-500],"id":"b0817e47-4ebb-4949-bc94-b687872a8f60","name":"Promotion?"},{"parameters":{"jsCode":"const parseAddress = (raw) => {\n  if (!raw || typeof raw !== 'string') return { name: '', email: '' };\n\n  const match = raw.match(/(.*)?<(.+)>/);\n  if (match) {\n    const name = match[1]?.trim().replace(/(^\"|\"$)/g, '') || '';\n    const email = match[2]?.trim().toLowerCase();\n    return { name, email };\n  } else {\n    return { name: '', email: raw.trim().toLowerCase() };\n  }\n};\n\nconst getHeader = (headers, name) => {\n  if (!Array.isArray(headers)) return null;\n  const match = headers.find(h => h.name?.toLowerCase() === name.toLowerCase());\n  return match?.value || null;\n};\n\nconst extractNameFromEmail = (email) => {\n  if (!email || typeof email !== 'string') return '';\n  const name = email.split('@')[0];\n  return name || '';\n};\n\nreturn items.map(item => {\n  const email = item.json || {};\n  const headers = email.payload?.headers || [];\n\n  const senderRaw = getHeader(headers, 'From');\n  if (!senderRaw) {\n    item.json.error = 'Missing \"From\" header';\n    return item;\n  }\n\n  let { name: senderName, email: senderEmail } = parseAddress(senderRaw);\n\n  // Additional fallback parsing\n  if (!senderName || !senderEmail) {\n    const rawSenderParts = senderRaw.split('<');\n    if (!senderName && rawSenderParts.length > 0) {\n      senderName = rawSenderParts[0]?.trim() || '';\n    }\n\n    if (!senderEmail && rawSenderParts.length >= 2) {\n      senderEmail = rawSenderParts[1].replace('>', '').trim().toLowerCase();\n    }\n  }\n\n  // Last resort fallback\n  if (!senderName) {\n    senderName = extractNameFromEmail(senderEmail);\n    if (senderName.trim().toLowerCase() === 'none') {\n      senderName = extractNameFromEmail(senderEmail);\n    }\n  }\n\n  // To\n  const toRaw = getHeader(headers, 'To');\n  const recipientEmails = toRaw\n    ? toRaw.split(',').map(a => parseAddress(a).email).filter(Boolean)\n    : [];\n\n  // Cc\n  const ccRaw = getHeader(headers, 'Cc');\n  const ccEmails = ccRaw\n    ? ccRaw.split(',').map(a => parseAddress(a).email).filter(Boolean)\n    : [];\n\n  // Date\n  const dateRaw = getHeader(headers, 'Date');\n  let parsedDate;\n  try {\n    parsedDate = dateRaw ? new Date(dateRaw) : new Date();\n    if (isNaN(parsedDate.getTime())) throw new Error('Invalid date');\n  } catch {\n    parsedDate = new Date(); // fallback to current time\n  }\n\n  // Subject\n  const subject = getHeader(headers, 'Subject') || '';\n\n  // IDs\n  const messageId = email.id || '';\n  const threadId = email.threadId || '';\n\n  item.json.sender_email = senderEmail || '';\n  item.json.sender_name = senderName || '';\n  item.json.sender_raw = senderRaw;\n\n  item.json.recipient_emails = recipientEmails.map(e => e.toLowerCase().trim());\n  item.json.cc_emails = ccEmails.map(e => e.toLowerCase().trim());\n  item.json.subject = subject;\n  item.json.date = parsedDate.toISOString();\n  item.json.message_id = messageId;\n  item.json.thread_id = threadId;\n\n  item.json.original_email_link = messageId\n    ? `https://mail.google.com/mail/u/0/#inbox/${messageId}`\n    : null;\n\n  item.json.ios_email_link = messageId\n    ? `googlegmail://co?search=inbox&query=${messageId}`\n    : null;\n\n  return item;\n});\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1180,-1020],"id":"724c3ac3-1086-428d-a8e3-a716ecf99779","name":"Extract Relevant Email Parts"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"7ddd0905-4d0f-46a2-ad55-ed8d42f084f8","leftValue":"={{ $('Extract Relevant Email Parts').item.json.recipient_emails }}","rightValue":"={{ $('Get Token and User').item.json.user.email }}","operator":{"type":"array","operation":"notContains","rightType":"any"}},{"id":"cab9f7e3-60a6-4052-a68c-bfac9058695d","leftValue":"={{ $('Extract Relevant Email Parts').item.json.cc_emails }}","rightValue":"={{ $('Get Token and User').item.json.user.email }}","operator":{"type":"array","operation":"notContains","rightType":"any"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1140,-740],"id":"54ada11d-822c-4985-bed3-a4d8dcf27f05","name":"Email Not Intended for User?"},{"parameters":{"workflowId":{"__rl":true,"value":"RfnGgM3fwYTCdR9z","mode":"list","cachedResultName":"ðŸ¤– Isolate Email"},"workflowInputs":{"mappingMode":"defineBelow","value":{"body":"={{ $json.decodedBody }}"},"matchingColumns":["body"],"schema":[{"id":"body","displayName":"body","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1360,-740],"id":"3775c6b1-f844-443d-b755-c5bc8d1df1c6","name":"Isolate Email Data"},{"parameters":{"assignments":{"assignments":[{"id":"2d929cf5-9529-405c-92fa-a483ebe2540d","name":"isolatedBody","value":"={{ $json.isolatedBody.replaceAll(\"## Email Body: \", \"\") }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1580,-740],"id":"b1d22345-3811-4a6c-a710-028eaac86f41","name":"Clean Email Body"},{"parameters":{"workflowId":{"__rl":true,"value":"AbHG9dGoCUT3jlMS","mode":"list","cachedResultName":"ðŸ¤– Markdownify Email Body"},"workflowInputs":{"mappingMode":"defineBelow","value":{"body":"={{ $json.isolatedBody }}"},"matchingColumns":["body"],"schema":[{"id":"body","displayName":"body","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":true}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1800,-740],"id":"43da69d5-f2a9-47c6-a3c8-8891b9a973d0","name":"Markdownify Body"},{"parameters":{"workflowId":{"__rl":true,"value":"3EG5o3fhuecGOliF","mode":"list","cachedResultName":"ðŸ¤– Summarize Email"},"workflowInputs":{"mappingMode":"defineBelow","value":{"body":"={{ $('Clean Email Body').item.json.isolatedBody }}"},"matchingColumns":["body"],"schema":[{"id":"body","displayName":"body","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":true}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2020,-740],"id":"fd90828d-f1fc-46b4-9c59-daf45406d3ec","name":"Summarize Email"},{"parameters":{"fieldsToAggregate":{"fieldToAggregate":[{"fieldToAggregate":"sender_email"}]},"options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[1340,-380],"id":"9802548a-6cf6-422f-9ce3-5217b223a84d","name":"Aggregate"},{"parameters":{"assignments":{"assignments":[{"id":"fa76dd85-6dfe-4f74-8745-e79808ed67bc","name":"relevantSenders","value":"={{ $json.sender_email }}","type":"array"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1560,-380],"id":"2c1bbcd1-efd7-4ccf-9fc8-20f3b08bb8ce","name":"Set Relevant Senders"},{"parameters":{"assignments":{"assignments":[{"id":"7eb451d8-d8a2-447c-8244-1cb4015b1238","name":"relevant","value":true,"type":"boolean"},{"id":"b7c6579f-e633-4a7f-8606-74fcfff74209","name":"explanation","value":"There are previous tasks extracted from emails sent by this sender.","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2000,-480],"id":"04c6b50f-8e72-4534-9b20-20562b135660","name":"Set Relevance"},{"parameters":{"workflowId":{"__rl":true,"value":"7Y2Au5L8TXsDK26Q","mode":"list","cachedResultName":"ðŸ¤– Classify Email Relevance"},"workflowInputs":{"mappingMode":"defineBelow","value":{"isCc":"={{ \n  ($('Extract Relevant Email Parts').item.json.cc_emails ?? []).includes($('Get Token and User').item.json.user.email) }}","sender":"={{ $('Extract Relevant Email Parts').item.json.sender_raw }}","recipient":"={{ $('Get Token and User').item.json.user.email }}","recipientName":"={{ $('Get Token and User').item.json.user.display_name }}","body":"={{ $('Clean Email Body').item.json.isolatedBody }}"},"matchingColumns":[],"schema":[{"id":"isCc","displayName":"isCc","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"boolean"},{"id":"sender","displayName":"sender","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"recipient","displayName":"recipient","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"recipientName","displayName":"recipientName","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"body","displayName":"body","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":true}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2000,-280],"id":"7f99d05a-fd23-4930-8c72-8749c0caf832","name":"Classify Email"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a79af1b8-2e35-4435-be5e-a83463e72464","leftValue":"={{ $json.sender_name }}","rightValue":"","operator":{"type":"string","operation":"notExists","singleValue":true}},{"id":"b6e17771-cd61-4bfb-964e-f53495ca8193","leftValue":"={{ $json.sender_name }}","rightValue":"","operator":{"type":"string","operation":"empty","singleValue":true}}],"combinator":"or"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1400,-1020],"id":"e20f2313-1e49-46b0-a4ff-a1c0d2982c07","name":"Sender Name Empty?"},{"parameters":{"workflowId":{"__rl":true,"value":"j3Rjsde1AhKArXGN","mode":"list","cachedResultName":"ðŸ¤– Extract Name"},"workflowInputs":{"mappingMode":"defineBelow","value":{"body":"={{ $json.decodedBody }}"},"matchingColumns":["body"],"schema":[{"id":"body","displayName":"body","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1620,-1100],"id":"535e6d66-59d1-4dd8-b2d3-72ff9601c0a6","name":"Extract Sender Name"},{"parameters":{"assignments":{"assignments":[{"id":"4248d748-e0f3-4d71-a9ea-93718d6b0298","name":"sender_name","value":"={{ $json.sender_name ?? $('Extract Sender Name').senderName }}","type":"string"}]},"includeOtherFields":true,"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1840,-1020],"id":"1ff7c624-8eed-4238-93c0-f3ae9e988f48","name":"Set Sender Name"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"8f1f659a-4b65-4bed-b2ab-f46165799ae2","leftValue":"={{ $json.relevantSenders }}","rightValue":"={{ $('Extract Relevant Email Parts').item.json.sender_email }}","operator":{"type":"array","operation":"contains","rightType":"any"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1780,-380],"id":"da4eba2a-ddd6-4bc0-b6a5-fd23338f02f2","name":"If sender is relevant?"},{"parameters":{"tableId":"emails","fieldsUi":{"fieldValues":[{"fieldId":"summary","fieldValue":"={{ $('Summarize Email').item.json.body }}"},{"fieldId":"subject","fieldValue":"={{ $('Extract Relevant Email Parts').item.json.subject }}"},{"fieldId":"user_id","fieldValue":"={{ $('Get Token and User').item.json.user.id }}"},{"fieldId":"body","fieldValue":"={{ $('Markdownify Body').item.json.body }}"},{"fieldId":"original_link","fieldValue":"={{ $('Extract Relevant Email Parts').item.json.original_email_link }}"},{"fieldId":"ios_link","fieldValue":"={{ $('Extract Relevant Email Parts').item.json.ios_email_link }}"},{"fieldId":"cc_emails","fieldValue":"={{ $('Extract Relevant Email Parts').item.json.cc_emails.join(\",\") }}"},{"fieldId":"recipient_emails","fieldValue":"={{ $('Extract Relevant Email Parts').item.json.recipient_emails.join(\",\") }}"},{"fieldId":"relevant","fieldValue":"={{ $json.relevant }}"},{"fieldId":"relevance_explanation","fieldValue":"={{ $json.explanation }}"},{"fieldId":"sender","fieldValue":"={{ $('Extract Relevant Email Parts').item.json.sender_raw }}"},{"fieldId":"sender_email","fieldValue":"={{ $('Extract Relevant Email Parts').item.json.sender_email }}"},{"fieldId":"sender_name","fieldValue":"={{ $('Set Sender Name').item.json.sender_name }}"},{"fieldId":"email_id","fieldValue":"={{ $('Get Full Gmail Email').item.json.id }}"},{"fieldId":"date_received","fieldValue":"={{ $('Extract Relevant Email Parts').item.json.date }}"},{"fieldId":"thread_id","fieldValue":"={{ $('Upsert Email Thread').item.json.threadId }}"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[2380,-380],"id":"509a06c9-700d-4cd6-8c2b-55b571e4ffa7","name":"Insert Email","credentials":{"supabaseApi":{"id":"4EHtJhQUmG6XN1Mw","name":"Supabase account"}}},{"parameters":{"workflowId":{"__rl":true,"value":"OIOzWFLJLQPje4hX","mode":"list","cachedResultName":"Upsert Email Thread"},"workflowInputs":{"mappingMode":"defineBelow","value":{"newEmailBody":"={{ $('Clean Email Body').item.json.isolatedBody }}","threadId":"={{ $('Get Full Gmail Email').item.json.threadId }}","newEmailDateReceived":"={{ $('Extract Relevant Email Parts').item.json.date }}"},"matchingColumns":[],"schema":[{"id":"threadId","displayName":"threadId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"newEmailBody","displayName":"newEmailBody","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"newEmailDateReceived","displayName":"newEmailDateReceived","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":true}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2240,-740],"id":"81dbe25d-4ca7-4535-913a-e76706c8a36f","name":"Upsert Email Thread"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"0577aa2e-884a-468c-8181-c642b94df437","leftValue":"={{ $json.relevant }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}},{"id":"82721e74-9c0c-40f0-995c-89abd582d891","leftValue":"={{ $json.sender_email }}","rightValue":"={{$('Get Token and User').item.json.user.email }}","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[2580,-380],"id":"fc0def35-ff47-4f5e-a1bb-66d19bac5ae0","name":"Relevant?"},{"parameters":{"workflowId":{"__rl":true,"value":"LKAAxIpErvFQzpD9","mode":"list","cachedResultName":"3. Create Tasks from Email"},"workflowInputs":{"mappingMode":"defineBelow","value":{"email":"={{ $('Insert Email').item.json }}","user":"={{ $('Get Token and User').item.json.user }}"},"matchingColumns":[],"schema":[{"id":"email","displayName":"email","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"object"},{"id":"user","displayName":"user","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"object"}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":true}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2800,-380],"id":"58e066ec-8709-4cce-809e-882131fd0525","name":"Extract and Process Tasks"},{"parameters":{"operation":"executeQuery","query":"SELECT COUNT(*)\nFROM emails\nWHERE email_id = '{{ $('Set Params').item.json.emailId }}'\nAND user_id = '{{ $json.user.id }}'","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[560,-900],"id":"af44c5a3-514a-4d11-a194-4cedab198cdc","name":"Check if Email Exists in User Inbox","credentials":{"postgres":{"id":"kI6uSN0fI2Vhpmlk","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT DISTINCT(e.sender_email)\nFROM emails AS e, tasks AS t\nWHERE e.id = t.extracted_from_id\nAND e.user_id = t.user_id\nAND t.user_id = '{{ $('Set Params').item.json.userId }}'\nAND t.progress IS NOT NULL\nAND t.progress <> ''\nAND e.sender_email <> ''","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1120,-380],"id":"f8d541a9-c55f-4a35-b739-497b933fec83","name":"Find Relevant Sender Emails","alwaysOutputData":true,"credentials":{"postgres":{"id":"kI6uSN0fI2Vhpmlk","name":"Postgres account"}}},{"parameters":{"workflowInputs":{"values":[{"name":"userId"},{"name":"emailId"}]}},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-260,-900],"id":"915944d3-2cc0-49b2-9264-7c915e0a9a03","name":"When Executed by Another Workflow"},{"parameters":{"content":"# 1. Check if the email is new.","height":360,"width":1060},"type":"n8n-nodes-base.stickyNote","position":[-240,-1100],"typeVersion":1,"id":"583385d1-6854-4e43-9431-426f24880aac","name":"Sticky Note"},{"parameters":{"content":"## 2. Check if it is a promotional email.","height":300,"width":1120},"type":"n8n-nodes-base.stickyNote","position":[-320,-640],"typeVersion":1,"id":"20bf1372-40e7-4308-9ab2-703c50acaed0","name":"Sticky Note1"},{"parameters":{"content":"## 3. Extract relevant parts from the email and save it.","height":1160,"width":1380,"color":4},"type":"n8n-nodes-base.stickyNote","position":[840,-1200],"typeVersion":1,"id":"601c6338-d7bf-4a76-92d3-0e5b0732bb90","name":"Sticky Note2"},{"parameters":{"content":"## 4. Extract tasks","height":320,"width":460,"color":3},"type":"n8n-nodes-base.stickyNote","position":[2300,-520],"typeVersion":1,"id":"3aad7807-373c-4e93-99bc-1a1efd284d88","name":"Sticky Note3"},{"parameters":{"assignments":{"assignments":[{"id":"993fe43f-f7d7-41b2-aa3a-e3ca26328a2a","name":"success","value":true,"type":"boolean"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[3020,-380],"id":"81296276-cca9-4be0-994b-3503de8c3a04","name":"Edit Fields","executeOnce":true},{"parameters":{"queue":"process-email","options":{"jsonParseBody":true,"parallelMessages":1}},"type":"n8n-nodes-base.rabbitmqTrigger","typeVersion":1,"position":[-280,-1240],"id":"9c0a9b89-f803-4022-b546-09759fde608f","name":"RabbitMQ Trigger","credentials":{"rabbitmq":{"id":"4LxGVa9giJ7XTVWN","name":"RabbitMQ account"}}},{"parameters":{"assignments":{"assignments":[{"id":"da75fc1f-a8f1-4d70-91ea-c0edaad3dd9b","name":"userId","value":"={{ $json.userId ?? $json.content.userId }}","type":"string"},{"id":"a61a57a0-8ef9-46e3-9e31-902b7b185478","name":"emailId","value":"={{ $json.emailId ?? $json.content.emailId }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[0,-900],"id":"11842a95-6237-4360-a928-da5fd3c200be","name":"Set Params"}],"connections":{"Get Token and User":{"main":[[{"node":"Check if Email Exists in User Inbox","type":"main","index":0}]]},"Exists?":{"main":[[],[{"node":"Get Full Gmail Email","type":"main","index":0}]]},"Get Full Gmail Email":{"main":[[{"node":"Decode Email Body","type":"main","index":0}]]},"Decode Email Body":{"main":[[{"node":"Check if it is Promotion","type":"main","index":0}]]},"Check if it is Promotion":{"main":[[{"node":"Promotion?","type":"main","index":0}]]},"Promotion?":{"main":[[],[{"node":"Extract Relevant Email Parts","type":"main","index":0}]]},"Extract Relevant Email Parts":{"main":[[{"node":"Sender Name Empty?","type":"main","index":0}]]},"Email Not Intended for User?":{"main":[[],[{"node":"Isolate Email Data","type":"main","index":0}]]},"Isolate Email Data":{"main":[[{"node":"Clean Email Body","type":"main","index":0}]]},"Clean Email Body":{"main":[[{"node":"Markdownify Body","type":"main","index":0}]]},"Markdownify Body":{"main":[[{"node":"Summarize Email","type":"main","index":0}]]},"Summarize Email":{"main":[[{"node":"Upsert Email Thread","type":"main","index":0}]]},"Aggregate":{"main":[[{"node":"Set Relevant Senders","type":"main","index":0}]]},"Set Relevant Senders":{"main":[[{"node":"If sender is relevant?","type":"main","index":0}]]},"Set Relevance":{"main":[[{"node":"Insert Email","type":"main","index":0}]]},"Classify Email":{"main":[[{"node":"Insert Email","type":"main","index":0}]]},"Sender Name Empty?":{"main":[[{"node":"Extract Sender Name","type":"main","index":0}],[{"node":"Set Sender Name","type":"main","index":0}]]},"Extract Sender Name":{"main":[[{"node":"Set Sender Name","type":"main","index":0}]]},"Set Sender Name":{"main":[[{"node":"Email Not Intended for User?","type":"main","index":0}]]},"If sender is relevant?":{"main":[[{"node":"Set Relevance","type":"main","index":0}],[{"node":"Classify Email","type":"main","index":0}]]},"Insert Email":{"main":[[{"node":"Relevant?","type":"main","index":0}]]},"Upsert Email Thread":{"main":[[{"node":"Find Relevant Sender Emails","type":"main","index":0}]]},"Relevant?":{"main":[[{"node":"Extract and Process Tasks","type":"main","index":0}],[]]},"Check if Email Exists in User Inbox":{"main":[[{"node":"Exists?","type":"main","index":0}]]},"Find Relevant Sender Emails":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"When Executed by Another Workflow":{"main":[[{"node":"Set Params","type":"main","index":0}]]},"Extract and Process Tasks":{"main":[[{"node":"Edit Fields","type":"main","index":0}]]},"RabbitMQ Trigger":{"main":[[{"node":"Set Params","type":"main","index":0}]]},"Set Params":{"main":[[{"node":"Get Token and User","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","callerPolicy":"workflowsFromSameOwner","errorWorkflow":"3DwlFyiaSzmnZPkS","saveExecutionProgress":true},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"620f7179-459b-4038-8243-f2d429584298","triggerCount":1,"tags":[]}