{"updatedAt":"2025-10-27T18:50:51.433Z","createdAt":"2025-09-17T11:52:52.326Z","id":"3s3VBDDnNGz5kLfK","name":"[TG] Job Processor","active":true,"isArchived":false,"nodes":[{"parameters":{"operation":"executeQuery","query":"UPDATE public.ai_processing_queue\nSET status = 'processing', updated_at = NOW()\nWHERE id = (\n  SELECT id\n  FROM public.ai_processing_queue\n  WHERE status = 'pending' AND process_at <= NOW()\n  ORDER BY process_at\n  LIMIT 1\n  FOR UPDATE SKIP LOCKED\n)\nRETURNING *;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[48,-128],"id":"69d1f60d-7bff-4b3c-9397-2b13c7640345","name":"Fetch Due Job","retryOnFail":true,"credentials":{"postgres":{"id":"hcrXy03eb7cfXzVe","name":"Supabase TX Pooler"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"4d75e122-ad45-4b13-b858-53be7d7ba2a8","leftValue":"={{ $json.id }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[272,-128],"id":"de0dc32d-3d7d-478d-a010-1606f84534e4","name":"Found?"},{"parameters":{"operation":"executeQuery","query":"SELECT *\nFROM public.telegram_messages\nWHERE sender_id = '{{ $json.sender_id }}'\n  AND processed_by_ai_at IS NULL\nORDER BY telegram_date ASC;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[496,-128],"id":"eea9b99a-3c21-4ced-bba9-329ebd0115a8","name":"Get Unprocessed Messages","retryOnFail":true,"credentials":{"postgres":{"id":"hcrXy03eb7cfXzVe","name":"Supabase TX Pooler"}}},{"parameters":{"jsCode":"const messages = $input.all();\n// Store the IDs of the messages we are processing\nconst messageIds = messages.map(item => item.json.id);\n// Combine the text of all messages into one string\nconst bundledText = messages.map(item => item.json.text).join('\\n\\n---\\n\\n');\n\nconst jobs = $(\"Found?\").all();\nconst jobsIds = jobs.map(item => item.json.id);\n\n// Pass both the bundled text and the IDs to the next nodes\nreturn {\n  bundledText,\n  processedMessageIds: messageIds,\n  jobsIds\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[720,-128],"id":"2913393f-7a5a-4391-9148-2f2f2fc42727","name":"Bundle Messages"},{"parameters":{"workflowId":{"__rl":true,"value":"1CRIZvDnn0bOy1Y5","mode":"list","cachedResultUrl":"/workflow/1CRIZvDnn0bOy1Y5","cachedResultName":"[TG] Get Cached Conversation"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Get Unprocessed Messages').first().json.sender_id.toNumber() }}"},"matchingColumns":["telegramId"],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":true,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1168,-128],"id":"98962a20-7275-4090-8ff2-758042c14174","name":"Get Chat History"},{"parameters":{"jsCode":"/**\n * Filter a chat history to only the last 2 hours and convert dates to a given time zone.\n *\n * @param {Array<{date:string,message:string,role:string}>} history\n * @param {string} tz IANA time zone, e.g. \"America/New_York\"\n * @param {number} hoursBack (optional) default 2\n * @returns {Array<{date:string,message:string,role:string}>}\n */\nfunction filterAndConvert(history, tz, hoursBack = 2) {\n  const nowUtc = Date.now();\n  const cutoffUtc = nowUtc - hoursBack * 60 * 60 * 1000;\n\n  return history\n    .filter(item => new Date(item.date).getTime() >= cutoffUtc)\n    .map(item => ({\n      ...item,\n      date: toTZISO(item.date, tz),\n    }));\n}\n\n/**\n * Convert an ISO string to the same moment expressed in another time zone,\n * returned as \"YYYY-MM-DDTHH:mm:ss[Â±HH:MM]\" (no milliseconds).\n *\n * Uses only built-ins (Intl.DateTimeFormat).\n */\nfunction toTZISO(dateString, tz) {\n  const d = new Date(dateString);\n\n  // Grab all parts in the desired TZ\n  const parts = new Intl.DateTimeFormat('en-CA', {\n    timeZone: tz,\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: false,\n  }).formatToParts(d).reduce((acc, p) => {\n    acc[p.type] = p.value;\n    return acc;\n  }, {});\n\n  // Build local datetime string\n  const local = `${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}:${parts.second}`;\n\n  // Compute offset for that TZ at that instant\n  const offsetMinutes = getOffsetMinutes(d, tz);\n  const sign = offsetMinutes >= 0 ? '+' : '-';\n  const abs = Math.abs(offsetMinutes);\n  const hh = String(Math.floor(abs / 60)).padStart(2, '0');\n  const mm = String(abs % 60).padStart(2, '0');\n\n  return `${local}${sign}${hh}:${mm}`;\n}\n\n/**\n * Find the UTC offset (in minutes) of a date in a given TZ using Intl.\n */\nfunction getOffsetMinutes(date, tz) {\n  // Format the same date in UTC and in the TZ, compare epoch millis reconstructed\n  const fmt = (zone) => {\n    const parts = new Intl.DateTimeFormat('en-CA', {\n      timeZone: zone,\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n    }).formatToParts(date).reduce((acc, p) => {\n      acc[p.type] = p.value;\n      return acc;\n    }, {});\n    return Date.UTC(\n      Number(parts.year),\n      Number(parts.month) - 1,\n      Number(parts.day),\n      Number(parts.hour),\n      Number(parts.minute),\n      Number(parts.second)\n    );\n  };\n\n  const asUtcMillis = fmt('UTC');\n  const asTzMillis = fmt(tz);\n  return (asTzMillis - asUtcMillis) / (60 * 1000);\n}\n\nconst history = $('Get Chat History').first().json.chat_history;\nconst tz = $('Get Time Zone').first().json.timeZone || 'America/New_York';\n\nconst filtered = filterAndConvert(history, tz);\n\n// Return as n8n items\nreturn { json: { history: filtered } };\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1616,-128],"id":"b5ba1f9e-4c4d-4a05-857f-f129e07ad6f9","name":"Filter Chat History"},{"parameters":{"workflowId":{"__rl":true,"value":"B4R5PCXZUaCSSdbV","mode":"list","cachedResultUrl":"/workflow/B4R5PCXZUaCSSdbV","cachedResultName":"[TG] Send Telegram Message"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Get Unprocessed Messages').first().json.sender_id.toNumber() }}","message":"={{ $json.response }}","chatId":"={{ $('Get Unprocessed Messages').first().json.sender_id.toNumber() }}","toolActivity":"={{ $json.toolActivity ?? [] }}"},"matchingColumns":[],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"message","displayName":"message","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"chatId","displayName":"chatId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"toolActivity","displayName":"toolActivity","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"array"}],"attemptToConvertTypes":true,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2064,-128],"id":"4cb5cde8-f709-43ec-bd2c-d49f71c119ec","name":"Send Telegram Message","onError":"continueRegularOutput"},{"parameters":{"workflowId":{"__rl":true,"value":"bNcOIAwEzwJCt4uG","mode":"list","cachedResultUrl":"/workflow/bNcOIAwEzwJCt4uG","cachedResultName":"[TG] Scheduling Agent"},"workflowInputs":{"mappingMode":"defineBelow","value":{"chat_history":"={{ $json }}","user_message":"={{ $('Bundle Messages').item.json.bundledText }}","time_zone":"={{ $('Get Time Zone').first().json.timeZone }}","user":"={{ $('Get Cached User by Telegram ID').item.json }}"},"matchingColumns":[],"schema":[{"id":"chat_history","displayName":"chat_history","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"object"},{"id":"time_zone","displayName":"time_zone","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"user_message","displayName":"user_message","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"user","displayName":"user","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"object","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"mode":"each","options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1840,-128],"id":"1e6d0c5c-bf40-4142-970f-3cee95527220","name":"Send to Agent"},{"parameters":{"workflowId":{"__rl":true,"value":"O0mTOcJxAhV0YuVI","mode":"list","cachedResultUrl":"/workflow/O0mTOcJxAhV0YuVI","cachedResultName":"[TG] Refresh Cached Chat History and Time Zone"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Get Unprocessed Messages').first().json.sender_id.toNumber() }}","userId":"={{ $('Get Cached User by Telegram ID').item.json.id }}"},"matchingColumns":[],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"userId","displayName":"userId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":true,"convertFieldsToString":true},"options":{"waitForSubWorkflow":false}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2288,-128],"id":"fdaf2539-dea5-4169-a13f-508c083c2f83","name":"Refresh Caches"},{"parameters":{"workflowId":{"__rl":true,"value":"vMEAaS35KPAgCfnj","mode":"list","cachedResultUrl":"/workflow/vMEAaS35KPAgCfnj","cachedResultName":"[TG] Get Cached Time Zone"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Get Unprocessed Messages').first().json.sender_id.toNumber() }}","userId":"={{ $('Get Cached User by Telegram ID').item.json.id }}"},"matchingColumns":[],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"userId","displayName":"userId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":true,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1392,-128],"id":"d9e61497-1d42-409e-b437-0a5bd1b4f2b0","name":"Get Time Zone"},{"parameters":{"workflowId":{"__rl":true,"value":"G7zoduW2QwUQ0lF6","mode":"list","cachedResultUrl":"/workflow/G7zoduW2QwUQ0lF6","cachedResultName":"[TG] Get Cached User by TelegramID"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Get Unprocessed Messages').first().json.sender_id.toNumber() }}"},"matchingColumns":["telegramId"],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"number"}],"attemptToConvertTypes":true,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[944,-128],"name":"Get Cached User by Telegram ID","id":"4b294507-773e-4d34-8908-2e3d8867abab"},{"parameters":{"operation":"executeQuery","query":"UPDATE public.telegram_messages\nSET processed_by_ai_at = '{{ $now.toISO() }}'\nWHERE id IN ({{ $('Bundle Messages').item.json.processedMessageIds.join(\",\") }})","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2512,-128],"id":"72509a23-68b1-4295-b3e1-ae2c84b0b609","name":"Mark Messages as Processed","retryOnFail":true,"credentials":{"postgres":{"id":"hcrXy03eb7cfXzVe","name":"Supabase TX Pooler"}}},{"parameters":{"operation":"executeQuery","query":"DELETE FROM public.ai_processing_queue\nWHERE id IN ({{ $('Bundle Messages').item.json.jobsIds.join(\",\") }})","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2736,-128],"id":"47f138d1-8602-49ee-b26d-eb860eab559d","name":"Delete Jobs","retryOnFail":true,"credentials":{"postgres":{"id":"hcrXy03eb7cfXzVe","name":"Supabase TX Pooler"}}},{"parameters":{"rule":{"interval":[{"field":"seconds","secondsInterval":2}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-176,-128],"id":"6a39f31d-5362-4f74-84c7-10b712f3a966","name":"Schedule 2 Seconds"}],"connections":{"Fetch Due Job":{"main":[[{"node":"Found?","type":"main","index":0}]]},"Found?":{"main":[[{"node":"Get Unprocessed Messages","type":"main","index":0}]]},"Get Unprocessed Messages":{"main":[[{"node":"Bundle Messages","type":"main","index":0}]]},"Bundle Messages":{"main":[[{"node":"Get Cached User by Telegram ID","type":"main","index":0}]]},"Get Chat History":{"main":[[{"node":"Get Time Zone","type":"main","index":0}]]},"Filter Chat History":{"main":[[{"node":"Send to Agent","type":"main","index":0}]]},"Send Telegram Message":{"main":[[{"node":"Refresh Caches","type":"main","index":0}]]},"Send to Agent":{"main":[[{"node":"Send Telegram Message","type":"main","index":0}]]},"Refresh Caches":{"main":[[{"node":"Mark Messages as Processed","type":"main","index":0}]]},"Get Time Zone":{"main":[[{"node":"Filter Chat History","type":"main","index":0}]]},"Get Cached User by Telegram ID":{"main":[[{"node":"Get Chat History","type":"main","index":0}]]},"Mark Messages as Processed":{"main":[[{"node":"Delete Jobs","type":"main","index":0}]]},"Schedule 2 Seconds":{"main":[[{"node":"Fetch Due Job","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Schedule 2 Seconds":{"recurrenceRules":[]}},"meta":null,"pinData":{"Schedule 2 Seconds":[{"json":{"timestamp":"2025-09-17T14:09:46.000+02:00","Readable date":"September 17th 2025, 2:09:46 pm","Readable time":"2:09:46 pm","Day of week":"Wednesday","Year":"2025","Month":"September","Day of month":"17","Hour":"14","Minute":"09","Second":"46","Timezone":"Europe/Berlin (UTC+02:00)"}}]},"versionId":"02540ab6-e95a-4a57-9e05-7114b47ae6b2","triggerCount":1,"shared":[{"updatedAt":"2025-09-17T11:52:52.326Z","createdAt":"2025-09-17T11:52:52.326Z","role":"workflow:owner","workflowId":"3s3VBDDnNGz5kLfK","projectId":"8nyfoRCh3nEYWaKJ"}],"tags":[]}