{"createdAt":"2025-09-10T22:30:46.720Z","updatedAt":"2025-09-11T19:46:28.228Z","id":"aPsU3vf5XWrleaDk","name":"WIP ==> üñ•Ô∏è [TG] Job Processor","active":true,"isArchived":false,"nodes":[{"parameters":{"operation":"executeQuery","query":"UPDATE dev.ai_processing_queue\nSET status = 'processing', updated_at = NOW()\nWHERE id = (\n  SELECT id\n  FROM dev.ai_processing_queue\n  WHERE status = 'pending' AND process_at <= NOW()\n  ORDER BY process_at\n  LIMIT 1\n  FOR UPDATE SKIP LOCKED\n)\nRETURNING *;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-816,-1120],"id":"70b3f086-3870-48e9-9e8c-c64f652b17f2","name":"Fetch Due Job","credentials":{"postgres":{"id":"hcrXy03eb7cfXzVe","name":"Supabase TX Pooler"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"4d75e122-ad45-4b13-b858-53be7d7ba2a8","leftValue":"={{ $json.id }}","rightValue":"","operator":{"type":"string","operation":"notEmpty","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-592,-1120],"id":"dbaea225-35bf-4b14-8fcc-df33f30b5fab","name":"Found?"},{"parameters":{"operation":"executeQuery","query":"SELECT *\nFROM dev.telegram_messages\nWHERE sender_id = '{{ $json.sender_id }}'\n  AND processed_by_ai_at IS NULL\nORDER BY telegram_date ASC;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-368,-1120],"id":"a96fe298-31c1-4780-96e0-c08d9c2a6324","name":"Get Unprocessed Messages","credentials":{"postgres":{"id":"hcrXy03eb7cfXzVe","name":"Supabase TX Pooler"}}},{"parameters":{"jsCode":"const messages = $input.all();\n// Store the IDs of the messages we are processing\nconst messageIds = messages.map(item => item.json.id);\n// Combine the text of all messages into one string\nconst bundledText = messages.map(item => item.json.text).join('\\n\\n---\\n\\n');\n\nconst jobs = $(\"Found?\").all();\nconst jobsIds = jobs.map(item => item.json.id);\n\n// Pass both the bundled text and the IDs to the next nodes\nreturn {\n  bundledText,\n  processedMessageIds: messageIds,\n  jobsIds\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-144,-1120],"id":"3220f5db-0ab2-4a97-a7bb-287a60f065fc","name":"Bundle Messages"},{"parameters":{"workflowId":{"__rl":true,"value":"IOSFHvzzfnVGmNZr","mode":"list","cachedResultName":"üñ•Ô∏è [TG] Get Cached Conversation"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Get Unprocessed Messages').first().json.sender_id.toNumber() }}"},"matchingColumns":["telegramId"],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":true,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[304,-1120],"id":"58740276-5d3e-4a0e-adc0-355f1f6edcca","name":"Get Chat History"},{"parameters":{"jsCode":"/**\n * Filter a chat history to only the last 2 hours and convert dates to a given time zone.\n *\n * @param {Array<{date:string,message:string,role:string}>} history\n * @param {string} tz IANA time zone, e.g. \"America/New_York\"\n * @param {number} hoursBack (optional) default 2\n * @returns {Array<{date:string,message:string,role:string}>}\n */\nfunction filterAndConvert(history, tz, hoursBack = 2) {\n  const nowUtc = Date.now();\n  const cutoffUtc = nowUtc - hoursBack * 60 * 60 * 1000;\n\n  return history\n    .filter(item => new Date(item.date).getTime() >= cutoffUtc)\n    .map(item => ({\n      ...item,\n      date: toTZISO(item.date, tz),\n    }));\n}\n\n/**\n * Convert an ISO string to the same moment expressed in another time zone,\n * returned as \"YYYY-MM-DDTHH:mm:ss[¬±HH:MM]\" (no milliseconds).\n *\n * Uses only built-ins (Intl.DateTimeFormat).\n */\nfunction toTZISO(dateString, tz) {\n  const d = new Date(dateString);\n\n  // Grab all parts in the desired TZ\n  const parts = new Intl.DateTimeFormat('en-CA', {\n    timeZone: tz,\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: false,\n  }).formatToParts(d).reduce((acc, p) => {\n    acc[p.type] = p.value;\n    return acc;\n  }, {});\n\n  // Build local datetime string\n  const local = `${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}:${parts.second}`;\n\n  // Compute offset for that TZ at that instant\n  const offsetMinutes = getOffsetMinutes(d, tz);\n  const sign = offsetMinutes >= 0 ? '+' : '-';\n  const abs = Math.abs(offsetMinutes);\n  const hh = String(Math.floor(abs / 60)).padStart(2, '0');\n  const mm = String(abs % 60).padStart(2, '0');\n\n  return `${local}${sign}${hh}:${mm}`;\n}\n\n/**\n * Find the UTC offset (in minutes) of a date in a given TZ using Intl.\n */\nfunction getOffsetMinutes(date, tz) {\n  // Format the same date in UTC and in the TZ, compare epoch millis reconstructed\n  const fmt = (zone) => {\n    const parts = new Intl.DateTimeFormat('en-CA', {\n      timeZone: zone,\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n    }).formatToParts(date).reduce((acc, p) => {\n      acc[p.type] = p.value;\n      return acc;\n    }, {});\n    return Date.UTC(\n      Number(parts.year),\n      Number(parts.month) - 1,\n      Number(parts.day),\n      Number(parts.hour),\n      Number(parts.minute),\n      Number(parts.second)\n    );\n  };\n\n  const asUtcMillis = fmt('UTC');\n  const asTzMillis = fmt(tz);\n  return (asTzMillis - asUtcMillis) / (60 * 1000);\n}\n\nconst history = $('Get Chat History').first().json.chat_history;\nconst tz = $('Get Time Zone').first().json.timeZone || 'America/New_York';\n\nconst filtered = filterAndConvert(history, tz);\n\n// Return as n8n items\nreturn { json: { history: filtered } };\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[752,-1120],"id":"3fcb98e2-73b7-4d91-a735-ba36a2d68454","name":"Filter Chat History"},{"parameters":{"workflowId":{"__rl":true,"value":"kI31iVTkkY44j2Rv","mode":"list","cachedResultName":"üñ•Ô∏è [TG] Send Telegram Message"},"workflowInputs":{"mappingMode":"defineBelow","value":{"message":"={{ $json.response }}","telegramId":"={{ $('Get Unprocessed Messages').first().json.sender_id.toNumber() }}","chatId":"={{ $('Get Unprocessed Messages').first().json.sender_id.toNumber() }}","toolActivity":"={{ $json.toolActivity ?? [] }}"},"matchingColumns":[],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"message","displayName":"message","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"chatId","displayName":"chatId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"toolActivity","displayName":"toolActivity","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"array","removed":false}],"attemptToConvertTypes":true,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1200,-1120],"id":"1674c4f5-e92d-4395-a80c-10e61fb7398f","name":"Send Telegram Message","onError":"continueRegularOutput"},{"parameters":{"workflowId":{"__rl":true,"value":"utMh5rQmfWApLYFc","mode":"list","cachedResultName":"üñ•Ô∏è [TG] Scheduling Agent"},"workflowInputs":{"mappingMode":"defineBelow","value":{"chat_history":"={{ $json }}","user_message":"={{ $('Bundle Messages').item.json.bundledText }}","time_zone":"={{ $('Get Time Zone').first().json.timeZone }}","user":"={{ $('Get Cached User by Telegram ID').item.json }}"},"matchingColumns":[],"schema":[{"id":"chat_history","displayName":"chat_history","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"object"},{"id":"time_zone","displayName":"time_zone","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"user_message","displayName":"user_message","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"user","displayName":"user","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"object","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"mode":"each","options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[976,-1120],"id":"ab792980-8237-4521-abb1-3d3a7bd6e0a2","name":"Send to Agent"},{"parameters":{"workflowId":{"__rl":true,"value":"k1DGWUkYJAlFS4iw","mode":"list","cachedResultName":"üñ•Ô∏è [TG] Refresh Cached Chat History and Time Zone"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Get Unprocessed Messages').first().json.sender_id.toNumber() }}","userId":"={{ $('Get Cached User by Telegram ID').item.json.id }}"},"matchingColumns":[],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"userId","displayName":"userId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":true,"convertFieldsToString":true},"options":{"waitForSubWorkflow":false}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1424,-1120],"id":"40876279-b367-45c4-b224-246026cf3dca","name":"Refresh Caches"},{"parameters":{"workflowId":{"__rl":true,"value":"9jeZuQfIDYEe9f5u","mode":"list","cachedResultName":"üñ•Ô∏è [TG] Get Cached Time Zone"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Get Unprocessed Messages').first().json.sender_id.toNumber() }}","userId":"={{ $('Get Cached User by Telegram ID').item.json.id }}"},"matchingColumns":[],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"userId","displayName":"userId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":true,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[528,-1120],"id":"31b47176-ef89-410e-8f2c-c0936cfdbedd","name":"Get Time Zone"},{"parameters":{"workflowId":{"__rl":true,"value":"Cmy0W7cqK2M9OaFZ","mode":"list","cachedResultName":"üñ•Ô∏è [TG] Get Cached User by TelegramID"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Get Unprocessed Messages').first().json.sender_id.toNumber() }}"},"matchingColumns":["telegramId"],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"number"}],"attemptToConvertTypes":true,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[80,-1120],"name":"Get Cached User by Telegram ID","id":"7f356b05-4db1-4b5a-bf1c-1b47df6c6f15"},{"parameters":{"operation":"executeQuery","query":"UPDATE dev.telegram_messages\nSET processed_by_ai_at = '{{ $now.toISO() }}'\nWHERE id IN ({{ $('Bundle Messages').item.json.processedMessageIds.join(\",\") }})","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1648,-1120],"id":"8e4a01d2-e9c4-476d-9b3c-6b4afe4fb41c","name":"Mark Messages as Processed","credentials":{"postgres":{"id":"hcrXy03eb7cfXzVe","name":"Supabase TX Pooler"}}},{"parameters":{"operation":"executeQuery","query":"DELETE FROM dev.ai_processing_queue\nWHERE id IN ({{ $('Bundle Messages').item.json.jobsIds.join(\",\") }})","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1872,-1120],"id":"07d0ac15-bffd-418c-8229-337d89f0b15b","name":"Delete Jobs","credentials":{"postgres":{"id":"hcrXy03eb7cfXzVe","name":"Supabase TX Pooler"}}},{"parameters":{"rule":{"interval":[{"field":"seconds","secondsInterval":10}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-1040,-1120],"id":"c4f95a79-4a50-456c-ad2b-7744f29b74d4","name":"Schedule 10 Seconds"}],"connections":{"Fetch Due Job":{"main":[[{"node":"Found?","type":"main","index":0}]]},"Found?":{"main":[[{"node":"Get Unprocessed Messages","type":"main","index":0}]]},"Get Unprocessed Messages":{"main":[[{"node":"Bundle Messages","type":"main","index":0}]]},"Get Chat History":{"main":[[{"node":"Get Time Zone","type":"main","index":0}]]},"Filter Chat History":{"main":[[{"node":"Send to Agent","type":"main","index":0}]]},"Send Telegram Message":{"main":[[{"node":"Refresh Caches","type":"main","index":0}]]},"Send to Agent":{"main":[[{"node":"Send Telegram Message","type":"main","index":0}]]},"Get Time Zone":{"main":[[{"node":"Filter Chat History","type":"main","index":0}]]},"Get Cached User by Telegram ID":{"main":[[{"node":"Get Chat History","type":"main","index":0}]]},"Bundle Messages":{"main":[[{"node":"Get Cached User by Telegram ID","type":"main","index":0}]]},"Refresh Caches":{"main":[[{"node":"Mark Messages as Processed","type":"main","index":0}]]},"Mark Messages as Processed":{"main":[[{"node":"Delete Jobs","type":"main","index":0}]]},"Schedule 10 Seconds":{"main":[[{"node":"Fetch Due Job","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","callerPolicy":"workflowsFromSameOwner","errorWorkflow":"63JMaA3ATIsJVc6Y"},"staticData":{"node:Run Every 30 Seconds":{"recurrenceRules":[]},"node:Run Every 15 Seconds":{"recurrenceRules":[]},"node:Run Every 5 Seconds":{"recurrenceRules":[]},"node:Schedule 2 Seconds":{"recurrenceRules":[]},"node:Schedule 10 Seconds":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{"Found?":[{"json":{"id":"1","created_at":"2025-09-11T19:19:30.518Z","updated_at":"2025-09-11T19:20:23.153Z","sender_id":"1598386790","status":"processing","process_at":"2025-09-11T19:19:35.428Z"}}],"Schedule 10 Seconds":[{"json":{"timestamp":"2025-09-11T21:20:22.001+02:00","Readable date":"September 11th 2025, 9:20:22 pm","Readable time":"9:20:22 pm","Day of week":"Thursday","Year":"2025","Month":"September","Day of month":"11","Hour":"21","Minute":"20","Second":"22","Timezone":"Europe/Berlin (UTC+02:00)"}}]},"versionId":"acd7482f-690c-46e1-9049-99303deeccbc","triggerCount":1,"shared":[{"createdAt":"2025-09-10T22:30:46.720Z","updatedAt":"2025-09-10T22:30:46.720Z","role":"workflow:owner","workflowId":"aPsU3vf5XWrleaDk","projectId":"8nyfoRCh3nEYWaKJ"}],"tags":[]}