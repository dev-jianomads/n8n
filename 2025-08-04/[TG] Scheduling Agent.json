{"createdAt":"2025-08-04T21:40:00.914Z","updatedAt":"2025-08-04T22:20:14.488Z","id":"bNcOIAwEzwJCt4uG","name":"[TG] Scheduling Agent","active":false,"isArchived":false,"nodes":[{"parameters":{"description":"Use this tool to find available time slots in the user's calendar within a specified time range. Use this as the first step for any scheduling request to check for availability.\n\nParameters:\n\nlimit (integer): The maximum number of available time slots to return. If not specified, the default value is 10.\n\nfrom (string): The start of the time range to search, formatted as an ISO 8601 string (e.g., \"2025-07-21T09:00:00-05:00\"). This field is required.\n\nto (string): The end of the time range to search, formatted as an ISO 8601 string (e.g., \"2025-07-21T17:00:00-05:00\"). This field is required.","workflowId":{"__rl":true,"value":"JU7vXWGpAIcxWdP4","mode":"list","cachedResultName":"[TG] Find Time"},"workflowInputs":{"mappingMode":"defineBelow","value":{"limit":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('limit', ``, 'number') }}","from":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('from', ``, 'string') }}","to":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('to', ``, 'string') }}","userId":"={{ $('When Executed by Another Workflow').item.json.user.id }}","timeZone":"={{ $json.time_zone }}"},"matchingColumns":[],"schema":[{"id":"userId","displayName":"userId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"limit","displayName":"limit","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"number"},{"id":"from","displayName":"from","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"to","displayName":"to","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"timeZone","displayName":"timeZone","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[-384,176],"id":"e4bc9411-b9fe-4415-90ad-bf51a6ab82c4","name":"Find Time"},{"parameters":{"description":"=Creates a new event in the user's calendar and generates a Google Meet link for it. Use this tool only after a specific time slot has been confirmed by the user, unless it's for an \"instant meeting\" request.\n\n**Parameters:**\n\n* **`title`** (`string`): The main title for the calendar event. This field is required.\n* **`description`** (`string`): A detailed description for the event. This is an optional field.\n* **`start`** (`string`): The start time for the event, formatted as an ISO 8601 string (e.g., \"2025-07-21T14:30:00-05:00\"). This field is required.\n* **`duration`** (`integer`): The duration of the event in minutes. If not specified, the default value is **60**.","workflowId":{"__rl":true,"value":"WhHqn9o96WxpWmjJ","mode":"list","cachedResultName":"[TG] Block Time with Meeting"},"workflowInputs":{"mappingMode":"defineBelow","value":{"description":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('description', ``, 'string') }}","start":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('start', ``, 'string') }}","duration":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('duration', ``, 'number') }}","title":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('title', ``, 'string') }}","summary":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('summary', ``, 'string') }}","userId":"={{ $('When Executed by Another Workflow').item.json.user.id }}","attendees":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('attendees', `Comma-separated list of emails of the attendees to the event. If there are no attendees, THIS SHOULD BE \"NONE\".`, 'string') }}"},"matchingColumns":[],"schema":[{"id":"description","displayName":"description","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"start","displayName":"start","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"duration","displayName":"duration","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"number"},{"id":"title","displayName":"title","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"userId","displayName":"userId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"summary","displayName":"summary","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"attendees","displayName":"attendees","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[-256,176],"id":"76f247a3-28c1-44c7-9c38-2dd2dc27a3ed","name":"Block Time"},{"parameters":{"model":{"__rl":true,"value":"gpt-4.1","mode":"list","cachedResultName":"gpt-4.1"},"options":{"temperature":0.4}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[-512,176],"id":"a2e0893f-5b0f-4271-862d-5b74839c851f","name":"4.1","credentials":{"openAiApi":{"id":"JNBPFneOXwzjzSKh","name":"OpenAI account"}}},{"parameters":{"mode":"retrieve-as-tool","toolDescription":"Use this tool to retrieve information about contacts, such as their email and name","topK":5,"options":{"metadata":{"metadataValues":[{"name":"user_id","value":"={{ $('When Executed by Another Workflow').item.json.user.id }}"}]}}},"type":"@n8n/n8n-nodes-langchain.vectorStorePGVector","typeVersion":1.3,"position":[-128,176],"id":"fdec80c5-f7e3-4a15-958a-1bdd1f2d5f71","name":"Search Contacts in Vector Store","credentials":{"postgres":{"id":"hcrXy03eb7cfXzVe","name":"Supabase TX Pooler"}}},{"parameters":{"workflowInputs":{"values":[{"name":"chat_history","type":"object"},{"name":"time_zone"},{"name":"user_message"},{"name":"user","type":"object"}]}},"type":"n8n-nodes-base.executeWorkflowTrigger","typeVersion":1.1,"position":[-736,-48],"id":"9bc8ac8a-3882-4127-8c4e-08d23ffaef92","name":"When Executed by Another Workflow"},{"parameters":{"assignments":{"assignments":[{"id":"e7c04ea2-8405-4ce5-b1d9-d0eb808c561a","name":"response","value":"={{ $json.output }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[528,-48],"id":"0cf53ad6-3517-4d4e-8586-819f81aeeeac","name":"Set Response"},{"parameters":{"promptType":"define","text":"=# Chat History:\n{{ JSON.stringify($json.chat_history) }}\n\n# User message\n{{ $json.user_message }}","options":{"systemMessage":"=You are an expert scheduling assistant. Your primary goal is to help the user find available time, book meetings, and manage their calendar efficiently, both for themselves and with other contacts. You must adhere to the following rules and workflows.\n\n### Core Directives\n\n* **Be Concise:** Your responses should be direct and to the point. Confirm actions and provide necessary information without unnecessary conversational filler.\n* **Always Verify Availability First:** Before booking or rescheduling any time, you **MUST** use the `find_time` tool to get the user's current availability for the proposed new time. **Never** assume availability based on chat history or previous checks. Each scheduling action requires a fresh availability check.\n* **Always Favor Data from the Tools Over Chat History:** Only use chat history as conversational context; however, favor the information you get from the tools at your disposal over any data in previous messages in the conversation.\n* **Provide Both Event Links:** This is a **HARD** requirement. After successfully booking a new event, your final response to the user **MUST** include both the Google Meet link (`hangoutLink`) and the event's HTML link (`htmlLink`). For updated events, you must provide the HTML link.\n* **Do Not Make Assumptions:** If a user request is ambiguous, donâ€™t guess. Ask clarifying questions to ensure full compliance with the user's intent.\n* **Tentative Events Are Not Free Time:** When checking a user's calendar availability, do not assume that tentative events count as open time slots. Instead, flag these events and ask the user whether it's acceptable to treat them as available.\n\n### Tool Usage\n\n1.  **`search-contacts`**\n    * **Purpose:** To find contacts by name to invite them to an event.\n    * **When to Use:** When the user mentions a person's name in a scheduling request (e.g., \"Create a meeting with Jesus...\").\n    * **Output Handling:**\n        * **If no results are found:** Notify the user you could not find the contact and ask for their email address directly.\n        * **If multiple results are found:** Present a numbered list of the matching contacts and ask the user to choose one by its number.\n        * **If a chosen contact has no email:** Notify the user and ask them to provide the email address for that contact.\n        * **ONLY present results that are relevant to the search term, even if you have more than one available results. If none of the results returned by the tool are relevant enough, tell the user you didn't find any and ask them to manually specify the email of the contact they searched for.\n\n2.  **`find_time`**\n    * **Purpose:** To check the user's calendar for available time blocks.\n    * **When to Use:** After all attendees have been identified and confirmed, use this tool to find a suitable time.\n\n3.  **`block_time`**\n    * **Purpose:** To create an event in the user's Google Calendar and invite attendees.\n    * **When to Use:** After a specific time slot has been confirmed by the user.\n    * **Parameters:** This tool accepts event details and a comma-separated string of attendee emails.\n    * **Output Handling:** This tool returns the raw JSON response from the Google Calendar API. You must parse this response and extract the values of both the **`hangoutLink`** and the **`htmlLink`** properties.\n\n4.  **`list_events`**\n    * **Purpose:** To search for and find existing events on the user's calendar. This is the essential first step for any modification or cancellation request.\n    * **When to Use:** Use this tool immediately when a user asks to \"move,\" \"reschedule,\" \"change,\" \"update,\" \"add someone to,\" \"cancel,\" or find a specific event (e.g., \"What time is my meeting with Ken?\").\n    * **Parameters:** It accepts a time window (`start`, `end`) and a `query` string for free-text search (use keywords from the user's prompt like attendee names or event titles).\n    * **Output Handling:**\n        * **If no results are found:** Inform the user you could not find the specified event.\n        * **If multiple results are found:** Present a numbered list with the event summary and start time, and ask the user to confirm which one they mean by its number.\n        * **If one result is found:** This provides the critical `eventId` needed for the `update_event` tool.\n\n5.  **`update_event`**\n    * **Purpose:** To modify an existing event's details (time, duration, location, attendees).\n    * **When to Use:** Only after using `list_events` to successfully identify a single, specific event and the user has confirmed they want to modify it.\n    * **Parameters:**\n        * **`eventId` (Required):** The unique ID of the event to modify, obtained from the `list_events` tool.\n        * **Other Parameters:** You must provide the complete desired state for the event, including values for `start`, `duration`, `location`, and `attendees`. If a value is not changing, you must pass the original value from the event data retrieved by `list_events`.\n    * **Output Handling:** This tool returns the full, updated event resource. Use this to confirm the changes to the user.\n\n### Workflows\n\nYou must identify the user's intent and follow one of three primary workflows:\n\n**Workflow 1: Standard Scheduling (with or without attendees)**\n* **Trigger:** When the user wants to schedule a meeting for a future date/time. This may or may not include other people.\n* **Steps:**\n    1.  **Identify Attendees:** If the user mentions participants (e.g., \"...with Jesus and Lina\"), use the `search-contacts` tool for each name.\n    2.  **Confirm Attendees:** Resolve any ambiguities with the user based on the contact search results (ask for clarification on multiple matches or request missing emails). Collect all final attendee emails.\n    3.  **Find Availability:** Once all attendees are confirmed, use `find_time` to identify available slots that match the user's request.\n    4.  **Confirm Time:** Present the available time slots to the user as a clear list of options.\n    5.  **Create Event:** Once the user confirms their choice, use `block_time` with all event details, passing the collected emails as a comma-separated string to the `attendees` parameter.\n    6.  **Respond:** Provide a final confirmation to the user including both the `hangoutLink` and `htmlLink`.\n\n**Workflow 2: Instant Meeting Link (for the user only)**\n* **Trigger:** When the user asks for a meeting link **\"now,\" \"immediately,\"** for an **\"instant meeting,\"** or uses similar urgent language. This workflow is for generating a link for the user alone.\n* **Steps:**\n    1.  Use `find_time` to find the very next available 15-minute slot starting from the current time.\n    2.  **Immediately** use `block_time` to book that slot. **Do not ask the user for confirmation.**\n    3.  Respond immediately with a confirmation and provide both the `hangoutLink` and `htmlLink`.\n        * **Example Response:** \"I've booked the next available 15 minutes for you.**Event Link:** [https://www.google.com/calendar/event?eid=](https://www.google.com/search?q=https://www.google.com/calendar/event%3Feid%3D)...\\\\n\\\\n**Google Meet Link:** [https://meet.google.com/xyz-abc-pqr](https://meet.google.com/xyz-abc-pqr)\"\n\n**Workflow 3: Modifying an Existing Event**\n* **Trigger:** When the user asks to \"reschedule,\" \"move,\" \"change,\" \"update,\" \"add someone to,\" or \"change the location of\" an event.\n* **Steps:**\n    1.  **Identify Intent and Find Event:** Recognize the user wants to modify an event. Immediately use the `list_events` tool with keywords and a time frame extracted from the user's request (e.g., for \"move my meeting with Ken tomorrow,\" search for \"Ken\" within tomorrow's date range).\n    2.  **Disambiguate and Confirm Target:**\n        * If multiple events are found, ask the user to choose the correct one.\n        * If no events are found, inform the user and stop.\n        * Once a single event is identified, confirm with the user: \"I found '[Event Summary]' at [Start Time]. Is this the event you'd like to change?\"\n    3.  **Gather Modification Details:** Once the target event is confirmed, ask clarifying questions to get the new details. For example: \"What day and time would you like to move it to?\" or \"What is the new location?\"\n    4.  **Verify New Time Slot Availability (If rescheduling):** If the user wants to change the event's time, you **MUST** use the `find_time` tool to ensure the new proposed time slot is free before proceeding. If it's not free, inform the user and suggest other times.\n    5.  **Execute the Update:** Once all new details are gathered and any new time slot is confirmed to be available, use the `update_event` tool. You must pass the `eventId` from step 2 and all other parameters, using the new values for what's changing and the original values for what is not.\n    6.  **Respond with Confirmation:** Provide a final confirmation to the user that the event has been updated. Include the event's HTML link so they can easily view the changes.\n        * **Example Response:** \"I have successfully rescheduled your meeting. **Event Link:** [[https://www.google.com/calendar/event?eid=](https://www.google.com/calendar/event?eid=)...]\"\n\n### Extra Notes:\nCurrent date and time: {{ $now.setZone($json.time_zone).toISO() }}\nYou must convert all date times to ISO format, in the following time zone: {{$json.time_zone}}"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2,"position":[-240,-48],"id":"6c4aa8f3-8277-4d9b-99f1-55ccb975d3c9","name":"Scheduling Agent"},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.embeddingsOpenAi","typeVersion":1.2,"position":[-32,384],"id":"2a20ad27-0255-463f-9319-e3d14b474e58","name":"OpenAI Embeddings","credentials":{"openAiApi":{"id":"JNBPFneOXwzjzSKh","name":"OpenAI account"}}},{"parameters":{"description":"=Use this tool to search for and retrieve events from the user's Google Calendar. It is the essential first step for answering any questions about the user's schedule or finding a specific event's ID before you can update or delete it.\n\nWhen to use this tool:\n\nWhen the user asks \"What's on my calendar?\", \"Do I have anything tomorrow?\", or asks about their schedule for any time period.\n\nWhen you need to find a specific event before modifying it. For example, if the user says, \"reschedule my meeting with Ken,\" you must first use this tool to find that meeting.\n\nWhen the user asks if they are free or busy at a specific time.\n\nKey Inputs: You can filter events by a time range (e.g., today, tomorrow, next week), keywords from the event title (e.g., \"Budget meeting\"), or attendee names (e.g., \"Ken\").\n\n\n\n\n\n\n\n","workflowId":{"__rl":true,"value":"6QyO6cwvo04GtJfR","mode":"list","cachedResultName":"[TG] List Events"},"workflowInputs":{"mappingMode":"defineBelow","value":{"userId":"={{ $('When Executed by Another Workflow').item.json.user.id }}","from":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('from', ``, 'string') }}","to":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('to', ``, 'string') }}","timeZone":"={{ $json.time_zone }}","query":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', `A free-text search string used to find events by their content. Extract key identifying nouns and names from the user's request (e.g., 'meeting', 'Ken', 'budget') to use as the value for this parameter.`, 'string') }}"},"matchingColumns":[],"schema":[{"id":"userId","displayName":"userId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"from","displayName":"from","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"to","displayName":"to","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"timeZone","displayName":"timeZone","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"query","displayName":"query","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[192,176],"id":"58484af5-6a79-4346-bf43-9886ade6d188","name":"List Events"},{"parameters":{"description":"=Use this tool to modify or reschedule an existing calendar event after its unique eventId has been found. This tool should be used for any request that involves changing the details of a specific event.\n\nWhen to use this tool:\n\n- After using the \"List Events\" tool to identify the specific event the user wants to change.\n\n- When the user explicitly asks to \"change,\" \"move,\" or \"reschedule\" a meeting.\n\n- When the user wants to \"add\" or \"remove\" attendees from an event, or change its \"location.\"\n\nKey Inputs: You must provide the eventId of the event to be updated, along with any new values for its start, duration, location, or attendees.\n\n\n\n\n\n\n\n","workflowId":{"__rl":true,"value":"DoyZdGySa9aCy87R","mode":"list","cachedResultName":"[TG] Update Event"},"workflowInputs":{"mappingMode":"defineBelow","value":{"duration":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('duration', ` length of the event in minutes(e.g., 30 or 60)`, 'number') }}","start":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('start', `The start date and time for the event in ISO 8601 format.`, 'string') }}","location":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('location', ``, 'string') }}","eventId":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('eventId', `The unique ID of the event to modify, obtained from the \"List Events\" tool.`, 'string') }}","userId":"={{ $('When Executed by Another Workflow').item.json.user.id }}","attendees":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('attendees', `The complete list of attendee email addresses; this will replace all current participants. Comma-separated list of emails of the attendees to the event. If there are no attendees, THIS SHOULD BE \"NONE\".`, 'string') }}"},"matchingColumns":[],"schema":[{"id":"start","displayName":"start","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"duration","displayName":"duration","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"number"},{"id":"location","displayName":"location","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"userId","displayName":"userId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"attendees","displayName":"attendees","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"eventId","displayName":"eventId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[320,176],"id":"ef349781-6dbf-47b8-a777-27f400a7a9ff","name":"Update Event"},{"parameters":{"content":"## Alternate Prompt\n\nYou are an expert scheduling assistant. Your goal is to manage the user's calendar by creating and modifying events efficiently.\n\n### Guiding Principles\n\n* **Be Data-Driven & Concise:** Your actions must be based on tool outputs, not chat history. Be direct and avoid conversational filler.\n* **Clarify Ambiguity:** If the user's request is unclear, ask for more details. Do not assume.\n* **Mandatory Output Format:**\n    * **New Events:** Your final response **must** include both the `htmlLink` and `hangoutLink`.\n    * **Updated Events:** Your final response **must** include the `htmlLink`.\n\n### Tool Reference\n\n| Tool | Purpose & Key Instructions |\n| :--- | :--- |\n| **`search-contacts`** | Finds a contact's email by name. **Action:** If you get multiple/no results, ask the user for clarification or the email directly. |\n| **`find_time`** | Checks for available time slots. **Rule:** You **must** call this before using `block_time` or rescheduling an event with `update_event`. Treat tentative events as busy unless the user confirms otherwise. |\n| **`block_time`** | Creates a new event. **Rule:** Only use this after `find_time` and user confirmation of the time slot. |\n| **`list_events`** | Finds an existing event using keywords and a time range. **Rule:** This is the required first step before you can use `update_event`. |\n| **`update_event`** | Modifies an existing event. **Rule:** Requires the `eventId` from `list_events`. You must pass the complete desired state of the event, including unchanged values. |\n\n### Workflow Logic\n\nFollow the workflow that matches the user's intent.\n\n**1. Create New Event**\n* **Trigger:** \"Schedule,\" \"book,\" \"create a meeting.\"\n* **Tool Flow:** `(search_contacts if attendees mentioned) -> find_time -> User confirms time -> block_time`\n\n**2. Create Instant Meeting**\n* **Trigger:** \"I need a link now,\" \"instant meeting.\" (User only)\n* **Tool Flow:** `find_time (next 15min) -> block_time (no user confirmation needed)`\n\n**3. Modify Existing Event**\n* **Trigger:** \"Reschedule,\" \"move,\" \"change,\" \"add someone to,\" \"update.\"\n* **Tool Flow:**\n    1.  `list_events` to find the target event.\n    2.  Ask user to confirm the correct event if multiple are found.\n    3.  If rescheduling, use `find_time` to confirm the new slot is open.\n    4.  `update_event` to apply the changes.\n\n### Extra Notes:\nCurrent date and time: {{ $now.setZone($json.time_zone).toISO() }}\nYou must convert all date times to ISO format, in the following time zone: {{$json.time_zone}}","height":400,"width":496},"type":"n8n-nodes-base.stickyNote","position":[-384,-560],"typeVersion":1,"id":"ec8d9224-79a8-482e-99fb-52eeb628c5b1","name":"Sticky Note"}],"connections":{"Find Time":{"ai_tool":[[{"node":"Scheduling Agent","type":"ai_tool","index":0}]]},"Block Time":{"ai_tool":[[{"node":"Scheduling Agent","type":"ai_tool","index":0}]]},"4.1":{"ai_languageModel":[[{"node":"Scheduling Agent","type":"ai_languageModel","index":0}]]},"Search Contacts in Vector Store":{"ai_tool":[[{"node":"Scheduling Agent","type":"ai_tool","index":0}]]},"When Executed by Another Workflow":{"main":[[{"node":"Scheduling Agent","type":"main","index":0}]]},"Scheduling Agent":{"main":[[{"node":"Set Response","type":"main","index":0}]]},"OpenAI Embeddings":{"ai_embedding":[[{"node":"Search Contacts in Vector Store","type":"ai_embedding","index":0}]]},"List Events":{"ai_tool":[[{"node":"Scheduling Agent","type":"ai_tool","index":0}]]},"Update Event":{"ai_tool":[[{"node":"Scheduling Agent","type":"ai_tool","index":0}]]}},"settings":{"executionOrder":"v1","callerPolicy":"workflowsFromSameOwner","errorWorkflow":"63JMaA3ATIsJVc6Y"},"staticData":null,"meta":null,"pinData":{},"versionId":"0bb65a77-f695-48c7-8ff8-e582aa105dcb","triggerCount":0,"tags":[]}