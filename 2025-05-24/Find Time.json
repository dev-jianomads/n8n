{"createdAt":"2025-05-12T20:53:01.551Z","updatedAt":"2025-05-20T22:36:27.000Z","id":"VaUc0Qx8pqIFLvmF","name":"Find Time","active":true,"isArchived":false,"nodes":[{"parameters":{"httpMethod":"POST","path":"aae12a40-c632-4849-82e6-3a070f3bf713","responseMode":"responseNode","options":{"rawBody":false}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-400,-220],"id":"a9d67bdc-1759-40dd-b781-f245392fbe86","name":"Webhook","webhookId":"aae12a40-c632-4849-82e6-3a070f3bf713"},{"parameters":{"operation":"get","tableId":"tasks","filters":{"conditions":[{"keyName":"id","keyValue":"={{ $json.body.taskId }}"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[-180,-220],"id":"66633517-9c5f-42aa-9287-4268fac68c74","name":"Get Task","credentials":{"supabaseApi":{"id":"4EHtJhQUmG6XN1Mw","name":"Supabase account"}}},{"parameters":{"workflowId":{"__rl":true,"value":"ar1V7OobX3sauykf","mode":"list","cachedResultName":"Get Token"},"workflowInputs":{"mappingMode":"defineBelow","value":{"user_id":"={{ $('Webhook').item.json.body.userId }}"},"matchingColumns":["user_id"],"schema":[{"id":"user_id","displayName":"user_id","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[260,-220],"id":"1124a736-faf4-475d-a70c-75f4e9587818","name":"Get Token and User"},{"parameters":{"conditions":{"options":{"caseSensitive":false,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"082aaa82-53e3-45ef-96e0-9d0cd1aaf7e6","leftValue":"={{ $('Get Task').item.json.category }}","rightValue":"event","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{"ignoreCase":true}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[920,-220],"id":"bc1fac38-30ba-4b14-9093-1e9cfb97f5fb","name":"Event?"},{"parameters":{"method":"POST","url":"https://www.googleapis.com/calendar/v3/freeBusy","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"=Bearer {{ $('Get Token and User').item.json.accessToken }}"},{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"timeMin","value":"={{ $('Get Default Start Date').item.json.startDate }}"},{"name":"timeMax","value":"={{ $('Get Default End Date').item.json.endDate }}"},{"name":"timeZone","value":"={{ $('Get Token and User').item.json.user.time_zone }}"},{"name":"items","value":"={{ [{\"id\": \"primary\"}] }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2020,-220],"id":"855b57c4-ee50-4b1a-a9b8-f43da19aec29","name":"Get Free Busy Data","retryOnFail":true,"alwaysOutputData":false,"onError":"continueErrorOutput"},{"parameters":{"operation":"get","tableId":"emails","filters":{"conditions":[{"keyName":"email_id","keyValue":"={{ $('Get Task').item.json.email_id }}"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[1140,-320],"id":"08683198-16f7-4e56-8f06-d9c4738fb297","name":"Get Email","credentials":{"supabaseApi":{"id":"4EHtJhQUmG6XN1Mw","name":"Supabase account"}}},{"parameters":{"workflowId":{"__rl":true,"value":"XS0zygeY8GDNLnNN","mode":"list","cachedResultName":"ðŸ¤– Find Date Range"},"workflowInputs":{"mappingMode":"defineBelow","value":{"body":"={{ $json.body }}","timeZone":"={{ $('Get Token and User').item.json.user.time_zone }}"},"matchingColumns":[],"schema":[{"id":"timeZone","displayName":"timeZone","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"body","displayName":"body","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1360,-320],"id":"17c4876e-58c9-453e-97af-e5a34d65e231","name":"Find Date Range"},{"parameters":{"assignments":{"assignments":[{"id":"840dbb20-b390-4516-8d00-95dbffa80f22","name":"startDate","value":"={{ $json.start ?? $('Get Default Start Date').item.json.startDate }}","type":"string"},{"id":"aea49d9b-5288-44e0-b3bb-69266a335d08","name":"endDate","value":"={{ DateTime.fromISO($json.start ?? $('Get Default Start Date').item.json.startDate, { zone: 'UTC' }).setZone($('Get Token and User').item.json.user.time_zone).plus({ days: 3 }).toISO({ suppressMilliseconds: true }) }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1580,-320],"id":"72f86c87-4d0b-4ac2-ba4b-c95bc821738b","name":"Set Dates"},{"parameters":{"assignments":{"assignments":[{"id":"3aa18ec6-b977-40cd-b26a-0a8d9fd5ed5a","name":"startDate","value":"={{ $('Get Default Start Date').item.json.startDate }}","type":"string"},{"id":"629fd87f-9f0e-4dbd-9f04-885b13f1977d","name":"endDate","value":"={{ $('Get Default End Date').item.json.startDate }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1580,-120],"id":"63d692de-c900-4c34-b420-d07621a06cdf","name":"Set Default Dates"},{"parameters":{"jsCode":"const getDefaultStartDate = (timeZone) => {\n  const now = DateTime.now().setZone(timeZone);\n\n  let resultDate;\n\n  if (now.hour < 19) {\n    // Add 1 hour, round down to the top of the next hour (00 mins, 00 secs)\n    resultDate = now.plus({ hours: 1 }).set({ minute: 0, second: 0, millisecond: 0 });\n  } else {\n    // After or at 7 PM â†’ Tomorrow at 07:00:00\n    resultDate = now.plus({ days: 1 }).set({ hour: 7, minute: 0, second: 0, millisecond: 0 });\n  }\n\n  // Return ISO string with timezone offset, no milliseconds\n  return resultDate.toISO({ suppressMilliseconds: true });\n};\n\n// Example usage\nconst timeZone = $('Get Token and User').first().json.user.time_zone; // Replace or get dynamically\nconst result = getDefaultStartDate(timeZone);\n\nreturn [{ json: { startDate: result } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[700,-220],"id":"a02492cf-da80-4d0d-9d33-20f1f4880cac","name":"Get Default Start Date"},{"parameters":{"jsCode":"const getDefaultEndDate = (timeZone) => {\n  const now = DateTime.now().setZone(timeZone);\n\n  let targetDate;\n  if (now.hour < 19) {\n    targetDate = now.set({ hour: 20, minute: 0, second: 0, millisecond: 0 });\n  } else {\n    targetDate = now.plus({ days: 1 }).set({ hour: 20, minute: 0, second: 0, millisecond: 0 });\n  }\n\n  return targetDate.toISO({ suppressMilliseconds: true });\n};\n\nconst timeZone = $input.first().json.user.time_zone;\nconst result = getDefaultEndDate(timeZone);\n\nreturn [{ json: { endDate: result } }];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[480,-220],"id":"b0001a27-fc8b-4770-ba7c-e602a177463c","name":"Get Default End Date"},{"parameters":{"jsCode":"// Inputs\nconst startDate = $('Consolidate Dates').first().json.startDate;\nconst endDate = $('Consolidate Dates').first().json.endDate;\nconst timeZone = $('Get Token and User').first().json.user.time_zone || 'UTC';\n\n// Parse to UTC\nconst startUTC = DateTime.fromISO(startDate).toUTC();\nconst endUTC = DateTime.fromISO(endDate).toUTC();\n\nconst generateNighttimeBlocks = (start, end) => {\n\tconst blocks = [];\n\tlet current = start.startOf('day');\n\n\twhile (current <= end) {\n\t\tconst nightStart = current.set({ hour: 20, minute: 0, second: 0, millisecond: 0 });\n\t\tconst nightEnd = current.set({ hour: 23, minute: 59, second: 59, millisecond: 0 });\n\n\t\tif (nightStart >= start && nightStart <= end) {\n\t\t\tblocks.push({\n\t\t\t\tstart: nightStart.setZone(timeZone).toISO({ suppressMilliseconds: true }),\n\t\t\t\tend: nightEnd.setZone(timeZone).toISO({ suppressMilliseconds: true }),\n\t\t\t});\n\t\t}\n\n\t\tconst nextMorningStart = current.plus({ days: 1 }).set({ hour: 0 });\n\t\tconst nextMorningEnd = nextMorningStart.set({ hour: 6 });\n\n\t\tif (nextMorningEnd >= start && nextMorningStart <= end) {\n\t\t\tblocks.push({\n\t\t\t\tstart: nextMorningStart.setZone(timeZone).toISO({ suppressMilliseconds: true }),\n\t\t\t\tend: nextMorningEnd.setZone(timeZone).toISO({ suppressMilliseconds: true }),\n\t\t\t});\n\t\t}\n\n\t\tcurrent = current.plus({ days: 1 });\n\t}\n\n\treturn blocks;\n};\n\nconst generateWeekendBlocks = (start, end) => {\n\tconst blocks = [];\n\tlet current = start.startOf('day');\n\tlet weekendStart = null;\n\n\twhile (current <= end) {\n\t\tconst isWeekend = current.weekday === 6 || current.weekday === 7;\n\n\t\tif (isWeekend && !weekendStart) {\n\t\t\tweekendStart = current > start ? current : start;\n\t\t}\n\n\t\tif (!isWeekend && weekendStart) {\n\t\t\tconst weekendEnd = current < end ? current : end;\n\t\t\tif (weekendEnd > weekendStart) {\n\t\t\t\tblocks.push({\n\t\t\t\t\tstart: weekendStart.setZone(timeZone).toISO({ suppressMilliseconds: true }),\n\t\t\t\t\tend: weekendEnd.setZone(timeZone).toISO({ suppressMilliseconds: true }),\n\t\t\t\t});\n\t\t\t}\n\t\t\tweekendStart = null;\n\t\t}\n\n\t\tcurrent = current.plus({ days: 1 });\n\t}\n\n\tif (weekendStart && end > weekendStart) {\n\t\tblocks.push({\n\t\t\tstart: weekendStart.setZone(timeZone).toISO({ suppressMilliseconds: true }),\n\t\t\tend: end.setZone(timeZone).toISO({ suppressMilliseconds: true }),\n\t\t});\n\t}\n\n\treturn blocks;\n};\n\nconst nighttimeBlocks = generateNighttimeBlocks(startUTC, endUTC);\nconst weekendBlocks = generateWeekendBlocks(startUTC, endUTC);\nconst busy = $input.first().json.calendars.primary.busy.concat(weekendBlocks);\n\nreturn [{\n\tjson: {\n\t\tnighttimeBlocks,\n\t\tweekendBlocks,\n        busy: $('Get Task').first().json.category.toLowerCase() === 'event' ?  busy.concat(nighttimeBlocks) : busy\n\t}\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2240,-220],"id":"c12d5bde-86b3-48da-994f-28ac1aa82128","name":"Generate Busy Blocks"},{"parameters":{"assignments":{"assignments":[{"id":"bcefd51a-2c9f-4b4d-a0d1-88efc7b40c22","name":"startDate","value":"={{ $json.startDate }}","type":"string"},{"id":"dc795c8e-a02a-4f8e-a1e1-a0b80f79586c","name":"endDate","value":"={{ $json.endDate }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1800,-220],"id":"e7471adc-9202-47e3-9cf2-5fcd71bb539b","name":"Consolidate Dates"},{"parameters":{"jsCode":"const startStr = $('Consolidate Dates').first().json.startDate;\nconst endStr = $('Consolidate Dates').first().json.endDate;\nconst incrementMinutes = $('Find Date Range').first().json.duration ?? 60;\nconst timeZone = $('Get Token and User').first().json.user.time_zone || 'UTC';\n\nif (incrementMinutes <= 0) {\n\treturn [{ json: { intervals: [] } }];\n}\n\n// Parse input in any zone, convert to UTC for logic\nconst startUTC = DateTime.fromISO(startStr).toUTC();\nconst endUTC = DateTime.fromISO(endStr).toUTC();\n\nif (startUTC > endUTC) {\n\treturn [{ json: { intervals: [] } }];\n}\n\n// Generate timestamps in UTC\nconst timestamps = [];\nlet current = startUTC;\n\nwhile (current <= endUTC) {\n\ttimestamps.push(current);\n\tcurrent = current.plus({ minutes: incrementMinutes });\n}\n\n// Pair timestamps, convert to output TZ\nconst intervals = [];\n\nfor (let i = 0; i < timestamps.length - 1; i++) {\n\tintervals.push({\n\t\tstart: timestamps[i].setZone(timeZone).toISO({ suppressMilliseconds: true }),\n\t\tend: timestamps[i + 1].setZone(timeZone).toISO({ suppressMilliseconds: true }),\n\t});\n}\n\nreturn [{ json: { intervals } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2460,-220],"id":"38342c53-2435-4182-b369-bd4a4975feb1","name":"Generate Time Blocks"},{"parameters":{"jsCode":"const timeZone = $('Get Token and User').first().json.user.time_zone || 'UTC';\nconst available = $input.first().json.intervals || [];\nconst busy = $('Generate Busy Blocks').first().json.busy || [];\n\n// --- Normalize and merge busy intervals in UTC ---\nconst mergeIntervals = (intervals) => {\n\tif (!intervals.length) return [];\n\n\tconst sorted = intervals\n\t\t.map(i => ({\n\t\t\tstart: DateTime.fromISO(i.start).toUTC(),\n\t\t\tend: DateTime.fromISO(i.end).toUTC(),\n\t\t}))\n\t\t.sort((a, b) => a.start - b.start);\n\n\tconst merged = [sorted[0]];\n\n\tfor (let i = 1; i < sorted.length; i++) {\n\t\tconst last = merged[merged.length - 1];\n\t\tconst current = sorted[i];\n\n\t\tif (current.start <= last.end) {\n\t\t\tlast.end = current.end > last.end ? current.end : last.end;\n\t\t} else {\n\t\t\tmerged.push(current);\n\t\t}\n\t}\n\n\treturn merged;\n};\n\n// --- Subtract merged busy intervals from available ---\nconst removeConflicts = (available, busyMerged) => {\n\tconst result = [];\n\n\tfor (const a of available) {\n\t\tconst aStartUTC = DateTime.fromISO(a.start).toUTC();\n\t\tconst aEndUTC = DateTime.fromISO(a.end).toUTC();\n\t\tlet currentStart = aStartUTC;\n\n\t\tfor (const b of busyMerged) {\n\t\t\tif (b.end <= currentStart) continue;\n\t\t\tif (b.start >= aEndUTC) break;\n\n\t\t\tif (b.start > currentStart) {\n\t\t\t\tresult.push({\n\t\t\t\t\tstart: currentStart,\n\t\t\t\t\tend: b.start,\n\t\t\t\t});\n\t\t\t}\n\t\t\tcurrentStart = b.end > currentStart ? b.end : currentStart;\n\t\t}\n\n\t\tif (currentStart < aEndUTC) {\n\t\t\tresult.push({\n\t\t\t\tstart: currentStart,\n\t\t\t\tend: aEndUTC,\n\t\t\t});\n\t\t}\n\t}\n\n\t// Filter and convert to target time zone\n\treturn result\n\t\t.filter(i => i.end > i.start)\n\t\t.map(i => ({\n\t\t\tstart: i.start.setZone(timeZone).toISO({ suppressMilliseconds: true }),\n\t\t\tend: i.end.setZone(timeZone).toISO({ suppressMilliseconds: true }),\n\t\t}));\n};\n\n// Run\nconst mergedBusy = mergeIntervals(busy);\nconst finalAvailable = removeConflicts(available, mergedBusy);\n\n// Output\nreturn {json: {finalAvailable}};\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2680,-220],"id":"7ef60a2b-64a9-4d92-a970-94e0f32dffd2","name":"Remove Conflicts"},{"parameters":{"assignments":{"assignments":[{"id":"411ca917-0c9e-4f63-92b5-c9df2459e26c","name":"mode","value":"={{ $json.category.toLowerCase() == \"event\" ? \"first\" : $('Webhook').item.json.body.mode }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[40,-220],"id":"5a96ee08-4c75-4f6e-8117-0b4ac6354adf","name":"Set Mode"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $('Set Mode').item.json.mode.toLowerCase() }}","rightValue":"first","operator":{"type":"string","operation":"equals"},"id":"e0528d43-c8b2-4e93-87d8-999c2341b820"}],"combinator":"and"},"renameOutput":true,"outputKey":"FIRST"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"38d1ac15-06dc-427f-8c78-607c14c042c5","leftValue":"={{ $('Set Mode').item.json.mode.toLowerCase() }}","rightValue":"last","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"LAST"}]},"options":{"fallbackOutput":"extra"}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[3120,-220],"id":"f0f55cd5-738e-4e61-8c03-7f9a433c8086","name":"Switch"},{"parameters":{"maxItems":"={{ $('Webhook').item.json.body.limit }}"},"type":"n8n-nodes-base.limit","typeVersion":1,"position":[3560,-420],"id":"132d725d-da0e-4778-8f62-415bb8b0d59f","name":"Get First"},{"parameters":{"maxItems":"={{ $('Webhook').item.json.body.limit }}","keep":"lastItems"},"type":"n8n-nodes-base.limit","typeVersion":1,"position":[3560,-220],"id":"25dd47b7-45bb-4cdb-b5ee-54357997f2f5","name":"Get Last"},{"parameters":{"type":"random"},"type":"n8n-nodes-base.sort","typeVersion":1,"position":[3340,-20],"id":"0e389bda-40bd-488c-b2e7-c0ae3dbd4238","name":"Sort","executeOnce":true},{"parameters":{"maxItems":"={{ $('Webhook').item.json.body.limit }}"},"type":"n8n-nodes-base.limit","typeVersion":1,"position":[3560,-20],"id":"80fa96be-6568-4f25-83a4-f2a31239d4a2","name":"Limit"},{"parameters":{"fieldToSplitOut":"finalAvailable","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[2900,-220],"id":"401814aa-3548-4985-ab8f-6a7e77be0692","name":"Split Out"},{"parameters":{"jsCode":"const inputSlots =  $input.first().json.data || [];\nconst timeZone = $('Get Token and User').first().json.user.time_zone || 'UTC';\n\nconst transformed = inputSlots.map(slot => {\n\tconst start = DateTime.fromISO(slot.start).setZone(timeZone);\n\tconst end = DateTime.fromISO(slot.end).setZone(timeZone);\n\n\tconst duration = Math.floor(end.diff(start, 'minutes').minutes);\n\n\t// Format time: \"09:00 AM\" â†’ \"9:00 AM\"\n\tlet displayTime = start.toFormat('hh:mm a');\n\tif (displayTime.startsWith('0')) {\n\t\tdisplayTime = displayTime.slice(1);\n\t}\n\n\t// Format date: \"Mon, May 12\"\n\tconst displayDate = start.toFormat(\"ccc, LLL d\");\n\n\t// Full: \"Mon, May 12 9:00 AM\"\n\tconst displayDatetime = `${displayDate} ${displayTime}`;\n\n\treturn {\n\t\traw_datetime: slot.start,\n\t\tduration,\n\t\tdisplay_time: displayTime,\n\t\tdisplay_date: displayDate,\n\t\tdisplay_datetime: displayDatetime\n\t};\n});\n\nreturn [{ json: { transformed } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4000,-220],"id":"f8a21ba0-9524-4d68-bc6f-a12463c42399","name":"Transform Time Slots"},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"type":"n8n-nodes-base.aggregate","typeVersion":1,"position":[3780,-220],"id":"5d21e504-5f52-495d-97f6-c1efc797e71f","name":"Aggregate"},{"parameters":{"respondWith":"json","responseBody":"={{ JSON.stringify($json.transformed) }}","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.1,"position":[4220,-220],"id":"3711b911-ad81-49f7-b346-aa8455dc8d4b","name":"Respond to Webhook"}],"connections":{"Webhook":{"main":[[{"node":"Get Task","type":"main","index":0}]]},"Get Task":{"main":[[{"node":"Set Mode","type":"main","index":0}]]},"Get Token and User":{"main":[[{"node":"Get Default End Date","type":"main","index":0}]]},"Event?":{"main":[[{"node":"Get Email","type":"main","index":0}],[{"node":"Set Default Dates","type":"main","index":0}]]},"Get Email":{"main":[[{"node":"Find Date Range","type":"main","index":0}]]},"Find Date Range":{"main":[[{"node":"Set Dates","type":"main","index":0}]]},"Set Dates":{"main":[[{"node":"Consolidate Dates","type":"main","index":0}]]},"Set Default Dates":{"main":[[{"node":"Consolidate Dates","type":"main","index":0}]]},"Get Default Start Date":{"main":[[{"node":"Event?","type":"main","index":0}]]},"Get Default End Date":{"main":[[{"node":"Get Default Start Date","type":"main","index":0}]]},"Get Free Busy Data":{"main":[[{"node":"Generate Busy Blocks","type":"main","index":0}]]},"Consolidate Dates":{"main":[[{"node":"Get Free Busy Data","type":"main","index":0}]]},"Generate Busy Blocks":{"main":[[{"node":"Generate Time Blocks","type":"main","index":0}]]},"Generate Time Blocks":{"main":[[{"node":"Remove Conflicts","type":"main","index":0}]]},"Remove Conflicts":{"main":[[{"node":"Split Out","type":"main","index":0}]]},"Set Mode":{"main":[[{"node":"Get Token and User","type":"main","index":0}]]},"Switch":{"main":[[{"node":"Get First","type":"main","index":0}],[{"node":"Get Last","type":"main","index":0}],[{"node":"Sort","type":"main","index":0}]]},"Sort":{"main":[[{"node":"Limit","type":"main","index":0}]]},"Split Out":{"main":[[{"node":"Switch","type":"main","index":0}]]},"Get First":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Aggregate":{"main":[[{"node":"Transform Time Slots","type":"main","index":0}]]},"Get Last":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Limit":{"main":[[{"node":"Aggregate","type":"main","index":0}]]},"Transform Time Slots":{"main":[[{"node":"Respond to Webhook","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","callerPolicy":"workflowsFromSameOwner","errorWorkflow":"3DwlFyiaSzmnZPkS"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"426dc062-8865-4577-b211-58b9b21f95f5","triggerCount":1,"tags":[]}