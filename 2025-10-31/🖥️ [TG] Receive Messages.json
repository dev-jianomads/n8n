{"updatedAt":"2025-10-23T17:28:51.567Z","createdAt":"2025-08-28T21:37:43.593Z","id":"gtGv6S5rp9zHYwRx","name":"üñ•Ô∏è [TG] Receive Messages","active":false,"isArchived":false,"nodes":[{"parameters":{"workflowId":{"__rl":true,"value":"IOSFHvzzfnVGmNZr","mode":"list","cachedResultName":"üñ•Ô∏è [TG] Get Cached Conversation"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Telegram Trigger').item.json.message.from.id }}"},"matchingColumns":["telegramId"],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":true,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[944,-752],"id":"ac899e35-c855-42bc-8369-f405c18f7995","name":"Get Chat History"},{"parameters":{"jsCode":"/**\n * Filter a chat history to only the last 2 hours and convert dates to a given time zone.\n *\n * @param {Array<{date:string,message:string,role:string}>} history\n * @param {string} tz IANA time zone, e.g. \"America/New_York\"\n * @param {number} hoursBack (optional) default 2\n * @returns {Array<{date:string,message:string,role:string}>}\n */\nfunction filterAndConvert(history, tz, hoursBack = 2) {\n  const nowUtc = Date.now();\n  const cutoffUtc = nowUtc - hoursBack * 60 * 60 * 1000;\n\n  return history\n    .filter(item => new Date(item.date).getTime() >= cutoffUtc)\n    .map(item => ({\n      ...item,\n      date: toTZISO(item.date, tz),\n    }));\n}\n\n/**\n * Convert an ISO string to the same moment expressed in another time zone,\n * returned as \"YYYY-MM-DDTHH:mm:ss[¬±HH:MM]\" (no milliseconds).\n *\n * Uses only built-ins (Intl.DateTimeFormat).\n */\nfunction toTZISO(dateString, tz) {\n  const d = new Date(dateString);\n\n  // Grab all parts in the desired TZ\n  const parts = new Intl.DateTimeFormat('en-CA', {\n    timeZone: tz,\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: false,\n  }).formatToParts(d).reduce((acc, p) => {\n    acc[p.type] = p.value;\n    return acc;\n  }, {});\n\n  // Build local datetime string\n  const local = `${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}:${parts.second}`;\n\n  // Compute offset for that TZ at that instant\n  const offsetMinutes = getOffsetMinutes(d, tz);\n  const sign = offsetMinutes >= 0 ? '+' : '-';\n  const abs = Math.abs(offsetMinutes);\n  const hh = String(Math.floor(abs / 60)).padStart(2, '0');\n  const mm = String(abs % 60).padStart(2, '0');\n\n  return `${local}${sign}${hh}:${mm}`;\n}\n\n/**\n * Find the UTC offset (in minutes) of a date in a given TZ using Intl.\n */\nfunction getOffsetMinutes(date, tz) {\n  // Format the same date in UTC and in the TZ, compare epoch millis reconstructed\n  const fmt = (zone) => {\n    const parts = new Intl.DateTimeFormat('en-CA', {\n      timeZone: zone,\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n    }).formatToParts(date).reduce((acc, p) => {\n      acc[p.type] = p.value;\n      return acc;\n    }, {});\n    return Date.UTC(\n      Number(parts.year),\n      Number(parts.month) - 1,\n      Number(parts.day),\n      Number(parts.hour),\n      Number(parts.minute),\n      Number(parts.second)\n    );\n  };\n\n  const asUtcMillis = fmt('UTC');\n  const asTzMillis = fmt(tz);\n  return (asTzMillis - asUtcMillis) / (60 * 1000);\n}\n\nconst history = $('Get Chat History').first().json.chat_history;\nconst tz = $('Get Time Zone').first().json.timeZone || 'America/New_York';\n\nconst filtered = filterAndConvert(history, tz);\n\n// Return as n8n items\nreturn { json: { history: filtered } };\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1392,-752],"id":"178fee72-fba6-4f9f-8bc9-c9ebc89d9fc6","name":"Filter Chat History"},{"parameters":{"updates":["message"],"additionalFields":{}},"type":"n8n-nodes-base.telegramTrigger","typeVersion":1.2,"position":[-176,-752],"id":"68398814-2882-43ad-907b-74b3207dac97","name":"Telegram Trigger","webhookId":"3ff26014-4acb-4bda-9fce-6a78a3e8ffa9","credentials":{"telegramApi":{"id":"jVBGRP26zaEzfcME","name":"Tomo DEV"}}},{"parameters":{"assignments":{"assignments":[{"id":"994defb3-f232-4a03-a0c8-248ff454b522","name":"timetampUTC","value":"={{ $json.message.date.toDateTime('s').toUTC().toISO() }}","type":"string"},{"id":"6148ee13-6558-4289-b01e-6c7faff5a027","name":"tomoTelegramId","value":"8354483273","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[272,-752],"id":"4e832dcd-5f34-4047-9e92-7ee5b1c51620","name":"Parse Timestamp from Inbound Message and Set Tomo TG ID"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"6dcf5122-b614-4414-805f-e9888284deea","leftValue":"={{ $('Telegram Trigger').item.json.message.text.startsWith(\"/start \") }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[496,-752],"id":"f1dc25c0-82fb-417b-9fc9-8b030c68d5c8","name":"Start Command?"},{"parameters":{"assignments":{"assignments":[{"id":"fbfa8f50-e7ec-4a2e-b015-cb686b2be6b8","name":"telegramToken","value":"={{ $('Telegram Trigger').item.json.message.text.split(\" \")[1].trim() }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[720,-944],"id":"00c0e30b-c1c1-4ad3-9832-e4653d2102fe","name":"Isolate Sign Up Token"},{"parameters":{"workflowId":{"__rl":true,"value":"B4R5PCXZUaCSSdbV","mode":"list","cachedResultName":"[TG] Send Telegram Message"},"workflowInputs":{"mappingMode":"defineBelow","value":{"message":"=Hi{{ $json.display_name !== undefined && $json.display_name !== null? ' ' + $json.display_name: '' }}! I‚Äôm Tomo. Just message me here and I‚Äôll help you schedule your meetings automatically.","telegramId":"={{ $('Telegram Trigger').item.json.message.chat.id.toString() }}","chatId":"={{ $('Telegram Trigger').item.json.message.chat.id.toString() }}"},"matchingColumns":[],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"message","displayName":"message","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"chatId","displayName":"chatId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1168,-944],"id":"46a964e7-5ae4-4eeb-8c7a-2ab631636192","name":"Send Welcome Message"},{"parameters":{"workflowId":{"__rl":true,"value":"kI31iVTkkY44j2Rv","mode":"list","cachedResultName":"üñ•Ô∏è [TG] Send Telegram Message"},"workflowInputs":{"mappingMode":"defineBelow","value":{"message":"={{ $json.response }}","telegramId":"={{ $('Telegram Trigger').item.json.message.chat.id.toString() }}","chatId":"={{ $('Telegram Trigger').item.json.message.chat.id.toString() }}","toolActivity":"={{ $json.toolActivity ?? [] }}"},"matchingColumns":[],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"message","displayName":"message","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"chatId","displayName":"chatId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"toolActivity","displayName":"toolActivity","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"array","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2064,-656],"id":"5b667624-a8ee-48f4-821e-8cc05e93f6f7","name":"Send Telegram Message","onError":"continueRegularOutput"},{"parameters":{"workflowId":{"__rl":true,"value":"utMh5rQmfWApLYFc","mode":"list","cachedResultName":"üñ•Ô∏è [TG] Scheduling Agent"},"workflowInputs":{"mappingMode":"defineBelow","value":{"chat_history":"={{ $json }}","user_message":"={{ $('Telegram Trigger').item.json.message.text }}","time_zone":"={{ $('Get Time Zone').first().json.timeZone }}","user":"={{ $('Get Cached User by Telegram ID').item.json }}"},"matchingColumns":[],"schema":[{"id":"chat_history","displayName":"chat_history","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"object"},{"id":"time_zone","displayName":"time_zone","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"user_message","displayName":"user_message","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"user","displayName":"user","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"object","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"mode":"each","options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1840,-656],"id":"6adc02dc-0694-4bcf-a38e-b1eb32f3791a","name":"Send to Agent"},{"parameters":{"conditions":{"options":{"caseSensitive":false,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d64023c7-9389-4271-92a1-ccadf5bf35f3","leftValue":"={{ $json.message.chat.type }}","rightValue":"private","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{"ignoreCase":true}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[48,-752],"id":"815e24a1-c66b-41b4-ac84-bb79f40f9e51","name":"Private?"},{"parameters":{"mode":"chooseBranch"},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1616,-656],"id":"edfa73de-5d4c-4feb-b7e5-5ff0e44e9444","name":"Merge"},{"parameters":{"workflowId":{"__rl":true,"value":"k1DGWUkYJAlFS4iw","mode":"list","cachedResultName":"üñ•Ô∏è [TG] Refresh Cached Chat History and Time Zone"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Telegram Trigger').item.json.message.chat.id.toString() }}","userId":"={{ $('Get Cached User by Telegram ID').item.json.id }}"},"matchingColumns":[],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"userId","displayName":"userId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":false}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2288,-656],"id":"92c3e934-751f-46d5-86c7-91331fda1929","name":"Refresh Caches"},{"parameters":{"workflowId":{"__rl":true,"value":"9jeZuQfIDYEe9f5u","mode":"list","cachedResultName":"üñ•Ô∏è [TG] Get Cached Time Zone"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Telegram Trigger').item.json.message.from.id.toString() }}","userId":"={{ $('Get Cached User by Telegram ID').item.json.id }}"},"matchingColumns":[],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"userId","displayName":"userId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1168,-752],"id":"8ab2f61d-69e1-47b3-b5cb-697c9c437cbe","name":"Get Time Zone"},{"parameters":{"workflowId":{"__rl":true,"value":"Cmy0W7cqK2M9OaFZ","mode":"list","cachedResultName":"üñ•Ô∏è [TG] Get Cached User by TelegramID"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Telegram Trigger').item.json.message.from.id }}"},"matchingColumns":["telegramId"],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"number"}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[720,-752],"name":"Get Cached User by Telegram ID","id":"6538c150-fbf0-4362-a942-7b10e3cbcdcd"},{"parameters":{"operation":"executeQuery","query":"SELECT dev.link_telegram_by_signup_token(\n    '{{ $('Telegram Trigger').item.json.message.chat.id }}',\n    '{{ $json.telegramToken }}',\n    '{{ $('Telegram Trigger').item.json.message.from.username }}'\n);","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[944,-944],"id":"8657416c-c26b-44bc-ac5e-08d129a70e08","name":"Update User with Telegram ID","credentials":{"postgres":{"id":"hcrXy03eb7cfXzVe","name":"Supabase TX Pooler"}}},{"parameters":{"schema":{"__rl":true,"value":"=dev","mode":"name"},"table":{"__rl":true,"value":"telegram_messages","mode":"list","cachedResultName":"telegram_messages"},"columns":{"mappingMode":"defineBelow","value":{"telegram_date":"={{ $('Telegram Trigger').item.json.message.date }}","telegram_date_utc":"={{ $json.timetampUTC }}","text":"={{ $('Telegram Trigger').item.json.message.text }}","direction":"inbound","sender_id":"={{ $('Telegram Trigger').item.json.message.from.id }}","recipient_id":"={{ $json.tomoTelegramId }}","raw_payload":"={{ $('Telegram Trigger').item.json }}"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"number","canBeUsedToMatch":true,"removed":true},{"id":"created_at","displayName":"created_at","required":false,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true},{"id":"telegram_date","displayName":"telegram_date","required":false,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":true},{"id":"telegram_date_utc","displayName":"telegram_date_utc","required":false,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true},{"id":"sender_id","displayName":"sender_id","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"recipient_id","displayName":"recipient_id","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"text","displayName":"text","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"raw_payload","displayName":"raw_payload","required":false,"defaultMatch":false,"display":true,"type":"object","canBeUsedToMatch":true},{"id":"attachments","displayName":"attachments","required":false,"defaultMatch":false,"display":true,"type":"object","canBeUsedToMatch":true,"removed":true},{"id":"direction","displayName":"direction","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"tool_activity","displayName":"tool_activity","required":false,"defaultMatch":false,"display":true,"type":"object","canBeUsedToMatch":true,"removed":true}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1392,-560],"id":"d50ba5af-7060-4874-83a4-595e8099ff0c","name":"Save Message","retryOnFail":true,"credentials":{"postgres":{"id":"hcrXy03eb7cfXzVe","name":"Supabase TX Pooler"}}}],"connections":{"Get Chat History":{"main":[[{"node":"Get Time Zone","type":"main","index":0}]]},"Filter Chat History":{"main":[[{"node":"Merge","type":"main","index":0}]]},"Telegram Trigger":{"main":[[{"node":"Private?","type":"main","index":0}]]},"Parse Timestamp from Inbound Message and Set Tomo TG ID":{"main":[[{"node":"Start Command?","type":"main","index":0}]]},"Start Command?":{"main":[[{"node":"Isolate Sign Up Token","type":"main","index":0}],[{"node":"Get Cached User by Telegram ID","type":"main","index":0},{"node":"Save Message","type":"main","index":0}]]},"Isolate Sign Up Token":{"main":[[{"node":"Update User with Telegram ID","type":"main","index":0}]]},"Send to Agent":{"main":[[{"node":"Send Telegram Message","type":"main","index":0}]]},"Private?":{"main":[[{"node":"Parse Timestamp from Inbound Message and Set Tomo TG ID","type":"main","index":0}]]},"Merge":{"main":[[{"node":"Send to Agent","type":"main","index":0}]]},"Send Telegram Message":{"main":[[{"node":"Refresh Caches","type":"main","index":0}]]},"Get Time Zone":{"main":[[{"node":"Filter Chat History","type":"main","index":0}]]},"Get Cached User by Telegram ID":{"main":[[{"node":"Get Chat History","type":"main","index":0}]]},"Update User with Telegram ID":{"main":[[{"node":"Send Welcome Message","type":"main","index":0}]]},"Save Message":{"main":[[{"node":"Merge","type":"main","index":1}]]}},"settings":{"executionOrder":"v1","callerPolicy":"workflowsFromSameOwner","errorWorkflow":"63JMaA3ATIsJVc6Y"},"staticData":{"node:Run Every 30 Seconds":{"recurrenceRules":[]},"node:Run Every 15 Seconds":{"recurrenceRules":[]},"node:Run Every 5 Seconds":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{"Telegram Trigger":[{"json":{"update_id":203108513,"message":{"message_id":32,"from":{"id":1598386790,"is_bot":false,"first_name":"Jes√∫s","last_name":"Mart√≠nez","username":"Jxx706","language_code":"en","is_premium":true},"chat":{"id":1598386790,"first_name":"Jes√∫s","last_name":"Mart√≠nez","username":"Jxx706","type":"private"},"date":1756852745,"text":"Not much"}}}]},"versionId":"91c2d093-634a-47c0-be27-d2b9d636b1e0","triggerCount":1,"shared":[{"updatedAt":"2025-08-28T21:37:43.593Z","createdAt":"2025-08-28T21:37:43.593Z","role":"workflow:owner","workflowId":"gtGv6S5rp9zHYwRx","projectId":"8nyfoRCh3nEYWaKJ"}],"tags":[]}