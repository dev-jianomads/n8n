{"createdAt":"2025-07-30T17:51:39.781Z","updatedAt":"2025-08-27T21:38:07.753Z","id":"eE6NDJqa50WcfjeC","name":"[TG] Receive Messages","active":true,"isArchived":false,"nodes":[{"parameters":{"tableId":"telegram_messages","fieldsUi":{"fieldValues":[{"fieldId":"telegram_date","fieldValue":"={{ $('Telegram Trigger').item.json.message.date }}"},{"fieldId":"telegram_date_utc","fieldValue":"={{ $json.timetampUTC }}"},{"fieldId":"text","fieldValue":"={{ $('Telegram Trigger').item.json.message.text }}"},{"fieldId":"direction","fieldValue":"inbound"},{"fieldId":"sender_id","fieldValue":"={{ $('Telegram Trigger').item.json.message.from.id }}"},{"fieldId":"recipient_id","fieldValue":"={{ $json.tomoTelegramId }}"},{"fieldId":"raw_payload","fieldValue":"={{ $('Telegram Trigger').item.json }}"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[1392,-400],"id":"ffe3d6cf-abf9-4c95-8444-98e1ddce5b3f","name":"Save Message","retryOnFail":true,"credentials":{"supabaseApi":{"id":"PwJN4yKDRZqivq2f","name":"Supabase account"}}},{"parameters":{"workflowId":{"__rl":true,"value":"1CRIZvDnn0bOy1Y5","mode":"list","cachedResultName":"[TG] Get Cached Conversation"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Telegram Trigger').item.json.message.from.id }}"},"matchingColumns":["telegramId"],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":true,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[944,-592],"id":"255732c7-edd8-4d58-aa45-8ca0b29dcf96","name":"Get Chat History"},{"parameters":{"operation":"get","tableId":"users","filters":{"conditions":[{"keyName":"telegram_id","keyValue":"={{ $('Telegram Trigger').item.json.message.from.id }}"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[720,-592],"id":"2038acb3-29ef-4b3a-90ab-1e18bda30951","name":"Get User","credentials":{"supabaseApi":{"id":"PwJN4yKDRZqivq2f","name":"Supabase account"}}},{"parameters":{"content":"## Old Prompt\n\nYou are an expert scheduling assistant. Your primary goal is to help the user find available time and book meetings on their calendar efficiently. You must adhere to the following rules and workflows.\n\n**Core Directives:**\n\n  * **Be Concise:** Your responses should be direct and to the point. Confirm actions and provide necessary information without unnecessary conversational filler.\n  * **Always Verify Availability First:** Before booking any time, you MUST first use the `find_time` tool to check for open slots.\n  * **Provide the Meeting Link:** After successfully booking an event, your final response to the user MUST include the Google Meet link.\n\n**Tool Usage:**\n\n1.  **`find_time`**\n\n      * **Purpose:** To check the user's calendar for available time blocks.\n      * **When to Use:** Use this as the first step for ALL scheduling requests.\n\n2.  **`block_time`**\n\n      * **Purpose:** To create an event in the user's Google Calendar.\n      * **When to Use:** Use this after confirming an available time slot.\n      * **Output Handling:** This tool returns the raw JSON response from the Google Calendar API. You must parse this response, extract the value of the **`hangoutLink`** property, and present this link clearly to the user.\n\n-----\n\n**Workflows**\n\nYou must identify the user's intent and follow one of two primary workflows:\n\n**Workflow 1: Standard Scheduling**\n\n  * **Trigger:** When the user wants to schedule a meeting for a future date/time or with specific people (e.g., \"book a meeting for tomorrow,\" \"find time with Jane next week\").\n  * **Steps:**\n    1.  Use `find_time` to identify all available slots that match the user's request.\n    2.  Present the available time slots to the user as a clear list of options.\n    3.  Once the user confirms their choice, use `block_time` to create the event.\n    4.  Respond with a confirmation and the extracted `hangoutLink`.\n\n**Workflow 2: Instant Meeting Link**\n\n  * **Trigger:** When the user asks for a meeting link **\"now,\" \"immediately,\"** for an **\"instant meeting,\"** or uses similar urgent language indicating a need for an immediate link.\n  * **Steps:**\n    1.  Use `find_time` to find the very next available 15-minute slot starting from the current time.\n    2.  **Immediately** use `block_time` to book that slot. **Do not ask the user for confirmation.** The goal is speed.\n    3.  Respond immediately with a confirmation that you've booked the next available slot and provide the extracted `hangoutLink`.\n\n      * **Example Response:** \"I've booked the next available 15 minutes for you. Here is your instant meeting link: [https://meet.google.com/xyz-abc-pqr](https://www.google.com/search?q=https://meet.google.com/xyz-abc-pqr)\"\n\n\n## Extra Notes:\nCurrent date and time: {{ $now.setZone($('Get Time Zone').first().json.timeZone).toISO() }}\nYou must convert all date times to ISO format, in the following time zone: {{ $('Get Time Zone').first().json.timeZone }}","height":1392,"width":672},"type":"n8n-nodes-base.stickyNote","position":[3200,-1936],"typeVersion":1,"id":"78984133-5ac5-4273-aa32-8d2cdb380a91","name":"Sticky Note1"},{"parameters":{"jsCode":"/**\n * Filter a chat history to only the last 2 hours and convert dates to a given time zone.\n *\n * @param {Array<{date:string,message:string,role:string}>} history\n * @param {string} tz IANA time zone, e.g. \"America/New_York\"\n * @param {number} hoursBack (optional) default 2\n * @returns {Array<{date:string,message:string,role:string}>}\n */\nfunction filterAndConvert(history, tz, hoursBack = 2) {\n  const nowUtc = Date.now();\n  const cutoffUtc = nowUtc - hoursBack * 60 * 60 * 1000;\n\n  return history\n    .filter(item => new Date(item.date).getTime() >= cutoffUtc)\n    .map(item => ({\n      ...item,\n      date: toTZISO(item.date, tz),\n    }));\n}\n\n/**\n * Convert an ISO string to the same moment expressed in another time zone,\n * returned as \"YYYY-MM-DDTHH:mm:ss[Â±HH:MM]\" (no milliseconds).\n *\n * Uses only built-ins (Intl.DateTimeFormat).\n */\nfunction toTZISO(dateString, tz) {\n  const d = new Date(dateString);\n\n  // Grab all parts in the desired TZ\n  const parts = new Intl.DateTimeFormat('en-CA', {\n    timeZone: tz,\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: false,\n  }).formatToParts(d).reduce((acc, p) => {\n    acc[p.type] = p.value;\n    return acc;\n  }, {});\n\n  // Build local datetime string\n  const local = `${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}:${parts.second}`;\n\n  // Compute offset for that TZ at that instant\n  const offsetMinutes = getOffsetMinutes(d, tz);\n  const sign = offsetMinutes >= 0 ? '+' : '-';\n  const abs = Math.abs(offsetMinutes);\n  const hh = String(Math.floor(abs / 60)).padStart(2, '0');\n  const mm = String(abs % 60).padStart(2, '0');\n\n  return `${local}${sign}${hh}:${mm}`;\n}\n\n/**\n * Find the UTC offset (in minutes) of a date in a given TZ using Intl.\n */\nfunction getOffsetMinutes(date, tz) {\n  // Format the same date in UTC and in the TZ, compare epoch millis reconstructed\n  const fmt = (zone) => {\n    const parts = new Intl.DateTimeFormat('en-CA', {\n      timeZone: zone,\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n    }).formatToParts(date).reduce((acc, p) => {\n      acc[p.type] = p.value;\n      return acc;\n    }, {});\n    return Date.UTC(\n      Number(parts.year),\n      Number(parts.month) - 1,\n      Number(parts.day),\n      Number(parts.hour),\n      Number(parts.minute),\n      Number(parts.second)\n    );\n  };\n\n  const asUtcMillis = fmt('UTC');\n  const asTzMillis = fmt(tz);\n  return (asTzMillis - asUtcMillis) / (60 * 1000);\n}\n\nconst history = $('Get Chat History').first().json.chat_history;\nconst tz = $('Get Time Zone').first().json.timeZone || 'America/New_York';\n\nconst filtered = filterAndConvert(history, tz);\n\n// Return as n8n items\nreturn { json: { history: filtered } };\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1392,-592],"id":"ebb1f2ce-2ec8-474e-9ead-ae8b922ed8d9","name":"Filter Chat History"},{"parameters":{"updates":["message"],"additionalFields":{}},"type":"n8n-nodes-base.telegramTrigger","typeVersion":1.2,"position":[-176,-592],"id":"eea19cb9-99d9-4f81-871b-898130e317a8","name":"Telegram Trigger","webhookId":"b68a7420-3736-44ca-92d8-4520d499e3af","credentials":{"telegramApi":{"id":"ZhOp4IaJqCFjHFqK","name":"Ask Tomo (PROD)"}}},{"parameters":{"assignments":{"assignments":[{"id":"994defb3-f232-4a03-a0c8-248ff454b522","name":"timetampUTC","value":"={{ $json.message.date.toDateTime('s').toUTC().toISO() }}","type":"string"},{"id":"6148ee13-6558-4289-b01e-6c7faff5a027","name":"tomoTelegramId","value":"8354483273","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[272,-592],"id":"0dd4bce8-9819-45f8-98d2-659b1008e14b","name":"Parse Timestamp from Inbound Message and Set Tomo TG ID"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"6dcf5122-b614-4414-805f-e9888284deea","leftValue":"={{ $('Telegram Trigger').item.json.message.text.startsWith(\"/start \") }}","rightValue":"","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[496,-592],"id":"90c0099a-2f44-47ff-98ee-d4095c13ad0d","name":"Start Command?"},{"parameters":{"assignments":{"assignments":[{"id":"fbfa8f50-e7ec-4a2e-b015-cb686b2be6b8","name":"telegramToken","value":"={{ $('Telegram Trigger').item.json.message.text.split(\" \")[1].trim() }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[720,-784],"id":"34de3a03-e4a6-4211-8bac-65198a30e934","name":"Isolate Sign Up Token"},{"parameters":{"operation":"update","tableId":"users","matchType":"allFilters","filters":{"conditions":[{"keyName":"telegram_signup_token","condition":"eq","keyValue":"={{ $json.telegramToken }}"},{"keyName":"telegram_id","condition":"is","keyValue":"null"}]},"fieldsUi":{"fieldValues":[{"fieldId":"telegram_id","fieldValue":"={{ $('Telegram Trigger').item.json.message.chat.id }}"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[944,-784],"id":"babe0050-fa63-463f-ac5e-5eee6545b655","name":"Update User with Telegram ID","credentials":{"supabaseApi":{"id":"PwJN4yKDRZqivq2f","name":"Supabase account"}}},{"parameters":{"workflowId":{"__rl":true,"value":"B4R5PCXZUaCSSdbV","mode":"list","cachedResultName":"[TG] Send Telegram Message"},"workflowInputs":{"mappingMode":"defineBelow","value":{"message":"=Hi{{ $json.display_name !== undefined && $json.display_name !== null? ' ' + $json.display_name: '' }}! Iâm Tomo. Just message me here and Iâll help you schedule your meetings automatically.","telegramId":"={{ $('Telegram Trigger').item.json.message.chat.id.toString() }}","chatId":"={{ $('Telegram Trigger').item.json.message.chat.id.toString() }}"},"matchingColumns":[],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"message","displayName":"message","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"chatId","displayName":"chatId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1168,-784],"id":"3a9efe22-8a58-443c-8874-ddc71996f462","name":"Send Welcome Message"},{"parameters":{"workflowId":{"__rl":true,"value":"B4R5PCXZUaCSSdbV","mode":"list","cachedResultName":"[TG] Send Telegram Message"},"workflowInputs":{"mappingMode":"defineBelow","value":{"message":"={{ $json.response }}","telegramId":"={{ $('Telegram Trigger').item.json.message.chat.id.toString() }}","chatId":"={{ $('Telegram Trigger').item.json.message.chat.id.toString() }}","toolActivity":"={{ $json.toolActivity ?? [] }}"},"matchingColumns":[],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"message","displayName":"message","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"chatId","displayName":"chatId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string","removed":false},{"id":"toolActivity","displayName":"toolActivity","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"array","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2064,-496],"id":"679b5709-096d-4dd7-b28b-4e9297cfab9d","name":"Send Telegram Message","onError":"continueRegularOutput"},{"parameters":{"workflowId":{"__rl":true,"value":"bNcOIAwEzwJCt4uG","mode":"list","cachedResultName":"[TG] Scheduling Agent"},"workflowInputs":{"mappingMode":"defineBelow","value":{"chat_history":"={{ $json }}","user_message":"={{ $('Telegram Trigger').item.json.message.text }}","time_zone":"={{ $('Get Time Zone').first().json.timeZone }}","user":"={{ $('Get User').item.json }}"},"matchingColumns":[],"schema":[{"id":"chat_history","displayName":"chat_history","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"object"},{"id":"time_zone","displayName":"time_zone","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"user_message","displayName":"user_message","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"user","displayName":"user","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"object","removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":true},"mode":"each","options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1840,-496],"id":"6b605466-7482-416d-87be-929d480be5bc","name":"Send to Agent"},{"parameters":{"conditions":{"options":{"caseSensitive":false,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d64023c7-9389-4271-92a1-ccadf5bf35f3","leftValue":"={{ $json.message.chat.type }}","rightValue":"private","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{"ignoreCase":true}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[48,-592],"id":"f8f02cbe-b2b3-4d21-af67-f28771b5fe75","name":"Private?"},{"parameters":{"mode":"chooseBranch"},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1616,-496],"id":"9a72eb26-2014-44b9-b6dd-542bd3033df4","name":"Merge"},{"parameters":{"workflowId":{"__rl":true,"value":"O0mTOcJxAhV0YuVI","mode":"list","cachedResultName":"[TG] Refresh Cached Chat History and Time Zone"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Telegram Trigger').item.json.message.chat.id.toString() }}","userId":"={{ $('Get User').item.json.id }}"},"matchingColumns":[],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"userId","displayName":"userId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{"waitForSubWorkflow":false}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[2288,-496],"id":"f4601c13-3faa-463a-bd7a-c8667331922f","name":"Refresh Caches"},{"parameters":{"workflowId":{"__rl":true,"value":"vMEAaS35KPAgCfnj","mode":"list","cachedResultName":"[TG] Get Cached Time Zone"},"workflowInputs":{"mappingMode":"defineBelow","value":{"telegramId":"={{ $('Telegram Trigger').item.json.message.from.id.toString() }}","userId":"={{ $('Get User').item.json.id }}"},"matchingColumns":[],"schema":[{"id":"telegramId","displayName":"telegramId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"},{"id":"userId","displayName":"userId","required":false,"defaultMatch":false,"display":true,"canBeUsedToMatch":true,"type":"string"}],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[1168,-592],"id":"168cc00c-61e9-4953-986a-08a3a0e51528","name":"Get Time Zone"}],"connections":{"Save Message":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Get Chat History":{"main":[[{"node":"Get Time Zone","type":"main","index":0}]]},"Get User":{"main":[[{"node":"Get Chat History","type":"main","index":0}]]},"Filter Chat History":{"main":[[{"node":"Merge","type":"main","index":0}]]},"Telegram Trigger":{"main":[[{"node":"Private?","type":"main","index":0}]]},"Parse Timestamp from Inbound Message and Set Tomo TG ID":{"main":[[{"node":"Start Command?","type":"main","index":0}]]},"Start Command?":{"main":[[{"node":"Isolate Sign Up Token","type":"main","index":0}],[{"node":"Save Message","type":"main","index":0},{"node":"Get User","type":"main","index":0}]]},"Isolate Sign Up Token":{"main":[[{"node":"Update User with Telegram ID","type":"main","index":0}]]},"Update User with Telegram ID":{"main":[[{"node":"Send Welcome Message","type":"main","index":0}]]},"Send to Agent":{"main":[[{"node":"Send Telegram Message","type":"main","index":0}]]},"Private?":{"main":[[{"node":"Parse Timestamp from Inbound Message and Set Tomo TG ID","type":"main","index":0}]]},"Merge":{"main":[[{"node":"Send to Agent","type":"main","index":0}]]},"Send Telegram Message":{"main":[[{"node":"Refresh Caches","type":"main","index":0}]]},"Get Time Zone":{"main":[[{"node":"Filter Chat History","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","callerPolicy":"workflowsFromSameOwner","errorWorkflow":"63JMaA3ATIsJVc6Y"},"staticData":{"node:Run Every 30 Seconds":{"recurrenceRules":[]},"node:Run Every 15 Seconds":{"recurrenceRules":[]},"node:Run Every 5 Seconds":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{"Telegram Trigger":[{"json":{"update_id":85502520,"message":{"message_id":1406,"from":{"id":1598386790,"is_bot":false,"first_name":"JesÃºs","last_name":"MartÃ­nez","username":"Jxx706","language_code":"en","is_premium":true},"chat":{"id":1598386790,"first_name":"JesÃºs","last_name":"MartÃ­nez","username":"Jxx706","type":"private"},"date":1756330518,"text":"Test"}}}]},"versionId":"fafa8e01-476c-46e7-897c-36d517efce85","triggerCount":1,"shared":[{"createdAt":"2025-07-30T17:51:39.781Z","updatedAt":"2025-07-30T17:51:39.781Z","role":"workflow:owner","workflowId":"eE6NDJqa50WcfjeC","projectId":"8nyfoRCh3nEYWaKJ"}],"tags":[]}